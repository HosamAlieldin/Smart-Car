
008_Sprints_Req_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000030da  0000316e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800178  00800178  00003286  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  00003288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001136  00000000  00000000  00005a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000931b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b878  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ba38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bd2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c69c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <main>
      8a:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 58       	subi	r30, 0x89	; 137
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Car_Init>:
 */

#include "Car_interface.h"

void Car_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinDirection(DIO_PD2, OUTPUT_PIN);
     e36:	8a e1       	ldi	r24, 0x1A	; 26
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(DIO_PD3, OUTPUT_PIN);
     e3e:	8b e1       	ldi	r24, 0x1B	; 27
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(DIO_PD4, OUTPUT_PIN);
     e46:	8c e1       	ldi	r24, 0x1C	; 28
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(DIO_PD5, OUTPUT_PIN);
     e4e:	8d e1       	ldi	r24, 0x1D	; 29
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(DIO_PD6, OUTPUT_PIN);
     e56:	8e e1       	ldi	r24, 0x1E	; 30
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(DIO_PD7, OUTPUT_PIN);
     e5e:	8f e1       	ldi	r24, 0x1F	; 31
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_vidSetPinDirection>

	DIO_vidWritePinValue(DIO_PD2, HIGH_PIN); 		//M1
     e66:	8a e1       	ldi	r24, 0x1A	; 26
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	DIO_vidWritePinValue(DIO_PD3, LOW_PIN);
     e6e:	8b e1       	ldi	r24, 0x1B	; 27
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>

	DIO_vidWritePinValue(DIO_PD6, HIGH_PIN); 		//M2
     e76:	8e e1       	ldi	r24, 0x1E	; 30
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	DIO_vidWritePinValue(DIO_PD7, LOW_PIN);
     e7e:	8f e1       	ldi	r24, 0x1F	; 31
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>

	Timer1_PWM_Mode_init();
     e86:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Timer1_PWM_Mode_init>
	Timer2_init_CTC_Mode();
     e8a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <Timer2_init_CTC_Mode>
	ICU_Init();
     e8e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <ICU_Init>
	LCD_init();
     e92:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <LCD_init>
	DIO_vidSetPinDirection(DIO_PB0, OUTPUT_PIN);
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_vidSetPinDirection>
	
	
}
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <Car_Move>:

void Car_Move(void)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	6c 97       	sbiw	r28, 0x1c	; 28
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
	uint16 volatile Distance=0;
     eb8:	1a 8e       	std	Y+26, r1	; 0x1a
     eba:	19 8e       	std	Y+25, r1	; 0x19
	
	DIO_vidWritePinValue(DIO_PB0, HIGH_PIN);
     ebc:	88 e0       	ldi	r24, 0x08	; 8
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a0 ef       	ldi	r26, 0xF0	; 240
     eca:	b1 e4       	ldi	r27, 0x41	; 65
     ecc:	8d 8b       	std	Y+21, r24	; 0x15
     ece:	9e 8b       	std	Y+22, r25	; 0x16
     ed0:	af 8b       	std	Y+23, r26	; 0x17
     ed2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ed4:	6d 89       	ldd	r22, Y+21	; 0x15
     ed6:	7e 89       	ldd	r23, Y+22	; 0x16
     ed8:	8f 89       	ldd	r24, Y+23	; 0x17
     eda:	98 8d       	ldd	r25, Y+24	; 0x18
     edc:	2b ea       	ldi	r18, 0xAB	; 171
     ede:	3a ea       	ldi	r19, 0xAA	; 170
     ee0:	4a ea       	ldi	r20, 0xAA	; 170
     ee2:	50 e4       	ldi	r21, 0x40	; 64
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	89 8b       	std	Y+17, r24	; 0x11
     eee:	9a 8b       	std	Y+18, r25	; 0x12
     ef0:	ab 8b       	std	Y+19, r26	; 0x13
     ef2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     ef4:	69 89       	ldd	r22, Y+17	; 0x11
     ef6:	7a 89       	ldd	r23, Y+18	; 0x12
     ef8:	8b 89       	ldd	r24, Y+19	; 0x13
     efa:	9c 89       	ldd	r25, Y+20	; 0x14
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e8       	ldi	r20, 0x80	; 128
     f02:	5f e3       	ldi	r21, 0x3F	; 63
     f04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f08:	88 23       	and	r24, r24
     f0a:	1c f4       	brge	.+6      	; 0xf12 <Car_Move+0x6e>
		__ticks = 1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	88 8b       	std	Y+16, r24	; 0x10
     f10:	91 c0       	rjmp	.+290    	; 0x1034 <Car_Move+0x190>
	else if (__tmp > 255)
     f12:	69 89       	ldd	r22, Y+17	; 0x11
     f14:	7a 89       	ldd	r23, Y+18	; 0x12
     f16:	8b 89       	ldd	r24, Y+19	; 0x13
     f18:	9c 89       	ldd	r25, Y+20	; 0x14
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	4f e7       	ldi	r20, 0x7F	; 127
     f20:	53 e4       	ldi	r21, 0x43	; 67
     f22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f26:	18 16       	cp	r1, r24
     f28:	0c f0       	brlt	.+2      	; 0xf2c <Car_Move+0x88>
     f2a:	7b c0       	rjmp	.+246    	; 0x1022 <Car_Move+0x17e>
	{
		_delay_ms(__us / 1000.0);
     f2c:	6d 89       	ldd	r22, Y+21	; 0x15
     f2e:	7e 89       	ldd	r23, Y+22	; 0x16
     f30:	8f 89       	ldd	r24, Y+23	; 0x17
     f32:	98 8d       	ldd	r25, Y+24	; 0x18
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a e7       	ldi	r20, 0x7A	; 122
     f3a:	54 e4       	ldi	r21, 0x44	; 68
     f3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8c 87       	std	Y+12, r24	; 0x0c
     f46:	9d 87       	std	Y+13, r25	; 0x0d
     f48:	ae 87       	std	Y+14, r26	; 0x0e
     f4a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4c:	6c 85       	ldd	r22, Y+12	; 0x0c
     f4e:	7d 85       	ldd	r23, Y+13	; 0x0d
     f50:	8e 85       	ldd	r24, Y+14	; 0x0e
     f52:	9f 85       	ldd	r25, Y+15	; 0x0f
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	4a e7       	ldi	r20, 0x7A	; 122
     f5a:	55 e4       	ldi	r21, 0x45	; 69
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	88 87       	std	Y+8, r24	; 0x08
     f66:	99 87       	std	Y+9, r25	; 0x09
     f68:	aa 87       	std	Y+10, r26	; 0x0a
     f6a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f6c:	68 85       	ldd	r22, Y+8	; 0x08
     f6e:	79 85       	ldd	r23, Y+9	; 0x09
     f70:	8a 85       	ldd	r24, Y+10	; 0x0a
     f72:	9b 85       	ldd	r25, Y+11	; 0x0b
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e8       	ldi	r20, 0x80	; 128
     f7a:	5f e3       	ldi	r21, 0x3F	; 63
     f7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f80:	88 23       	and	r24, r24
     f82:	2c f4       	brge	.+10     	; 0xf8e <Car_Move+0xea>
		__ticks = 1;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9f 83       	std	Y+7, r25	; 0x07
     f8a:	8e 83       	std	Y+6, r24	; 0x06
     f8c:	3f c0       	rjmp	.+126    	; 0x100c <Car_Move+0x168>
	else if (__tmp > 65535)
     f8e:	68 85       	ldd	r22, Y+8	; 0x08
     f90:	79 85       	ldd	r23, Y+9	; 0x09
     f92:	8a 85       	ldd	r24, Y+10	; 0x0a
     f94:	9b 85       	ldd	r25, Y+11	; 0x0b
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	3f ef       	ldi	r19, 0xFF	; 255
     f9a:	4f e7       	ldi	r20, 0x7F	; 127
     f9c:	57 e4       	ldi	r21, 0x47	; 71
     f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	4c f5       	brge	.+82     	; 0xff8 <Car_Move+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa6:	6c 85       	ldd	r22, Y+12	; 0x0c
     fa8:	7d 85       	ldd	r23, Y+13	; 0x0d
     faa:	8e 85       	ldd	r24, Y+14	; 0x0e
     fac:	9f 85       	ldd	r25, Y+15	; 0x0f
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e2       	ldi	r20, 0x20	; 32
     fb4:	51 e4       	ldi	r21, 0x41	; 65
     fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9f 83       	std	Y+7, r25	; 0x07
     fcc:	8e 83       	std	Y+6, r24	; 0x06
     fce:	0f c0       	rjmp	.+30     	; 0xfee <Car_Move+0x14a>
     fd0:	80 e9       	ldi	r24, 0x90	; 144
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	9d 83       	std	Y+5, r25	; 0x05
     fd6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <Car_Move+0x138>
     fe0:	9d 83       	std	Y+5, r25	; 0x05
     fe2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe4:	8e 81       	ldd	r24, Y+6	; 0x06
     fe6:	9f 81       	ldd	r25, Y+7	; 0x07
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	9f 83       	std	Y+7, r25	; 0x07
     fec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fee:	8e 81       	ldd	r24, Y+6	; 0x06
     ff0:	9f 81       	ldd	r25, Y+7	; 0x07
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	69 f7       	brne	.-38     	; 0xfd0 <Car_Move+0x12c>
     ff6:	24 c0       	rjmp	.+72     	; 0x1040 <Car_Move+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff8:	68 85       	ldd	r22, Y+8	; 0x08
     ffa:	79 85       	ldd	r23, Y+9	; 0x09
     ffc:	8a 85       	ldd	r24, Y+10	; 0x0a
     ffe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9f 83       	std	Y+7, r25	; 0x07
    100a:	8e 83       	std	Y+6, r24	; 0x06
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	9f 81       	ldd	r25, Y+7	; 0x07
    1010:	9b 83       	std	Y+3, r25	; 0x03
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <Car_Move+0x174>
    101c:	9b 83       	std	Y+3, r25	; 0x03
    101e:	8a 83       	std	Y+2, r24	; 0x02
    1020:	0f c0       	rjmp	.+30     	; 0x1040 <Car_Move+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1022:	69 89       	ldd	r22, Y+17	; 0x11
    1024:	7a 89       	ldd	r23, Y+18	; 0x12
    1026:	8b 89       	ldd	r24, Y+19	; 0x13
    1028:	9c 89       	ldd	r25, Y+20	; 0x14
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	88 8b       	std	Y+16, r24	; 0x10
    1034:	88 89       	ldd	r24, Y+16	; 0x10
    1036:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	8a 95       	dec	r24
    103c:	f1 f7       	brne	.-4      	; 0x103a <Car_Move+0x196>
    103e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(30);
	DIO_vidWritePinValue(DIO_PB0, LOW_PIN);
    1040:	88 e0       	ldi	r24, 0x08	; 8
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	Distance = (uint16)(17000*T_on);
    1048:	80 91 82 01 	lds	r24, 0x0182
    104c:	90 91 83 01 	lds	r25, 0x0183
    1050:	a0 91 84 01 	lds	r26, 0x0184
    1054:	b0 91 85 01 	lds	r27, 0x0185
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 ed       	ldi	r19, 0xD0	; 208
    1060:	44 e8       	ldi	r20, 0x84	; 132
    1062:	56 e4       	ldi	r21, 0x46	; 70
    1064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9a 8f       	std	Y+26, r25	; 0x1a
    107a:	89 8f       	std	Y+25, r24	; 0x19
	if((Distance >= 3)&&(Distance < 400))
    107c:	89 8d       	ldd	r24, Y+25	; 0x19
    107e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	91 05       	cpc	r25, r1
    1084:	e8 f1       	brcs	.+122    	; 0x1100 <Car_Move+0x25c>
    1086:	89 8d       	ldd	r24, Y+25	; 0x19
    1088:	9a 8d       	ldd	r25, Y+26	; 0x1a
    108a:	21 e0       	ldi	r18, 0x01	; 1
    108c:	80 39       	cpi	r24, 0x90	; 144
    108e:	92 07       	cpc	r25, r18
    1090:	b8 f5       	brcc	.+110    	; 0x1100 <Car_Move+0x25c>
	{
		LCD_goToRowColumn(0,0);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_goToRowColumn>
		LCD_displayString("Distance= ");
    109a:	80 e6       	ldi	r24, 0x60	; 96
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <LCD_displayString>
		LCD_displayCharacter(((uint8)(Distance/100))+'0');
    10a2:	89 8d       	ldd	r24, Y+25	; 0x19
    10a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10a6:	24 e6       	ldi	r18, 0x64	; 100
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	b9 01       	movw	r22, r18
    10ac:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__udivmodhi4>
    10b0:	cb 01       	movw	r24, r22
    10b2:	80 5d       	subi	r24, 0xD0	; 208
    10b4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_displayCharacter>
		LCD_displayCharacter(((uint8)((Distance%100)/10))+'0');
    10b8:	89 8d       	ldd	r24, Y+25	; 0x19
    10ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10bc:	24 e6       	ldi	r18, 0x64	; 100
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	b9 01       	movw	r22, r18
    10c2:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__udivmodhi4>
    10c6:	2a e0       	ldi	r18, 0x0A	; 10
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	b9 01       	movw	r22, r18
    10cc:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__udivmodhi4>
    10d0:	cb 01       	movw	r24, r22
    10d2:	80 5d       	subi	r24, 0xD0	; 208
    10d4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_displayCharacter>
		LCD_displayCharacter(((uint8)((Distance%100)%10))+'0');
    10d8:	89 8d       	ldd	r24, Y+25	; 0x19
    10da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10dc:	24 e6       	ldi	r18, 0x64	; 100
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	b9 01       	movw	r22, r18
    10e2:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__udivmodhi4>
    10e6:	2a e0       	ldi	r18, 0x0A	; 10
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	b9 01       	movw	r22, r18
    10ec:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__udivmodhi4>
    10f0:	80 5d       	subi	r24, 0xD0	; 208
    10f2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_displayCharacter>
		LCD_displayString(" CM");
    10f6:	8b e6       	ldi	r24, 0x6B	; 107
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 90 15 	call	0x2b20	; 0x2b20 <LCD_displayString>
    10fe:	15 c0       	rjmp	.+42     	; 0x112a <Car_Move+0x286>
	}
	else
	{
		LCD_goToRowColumn(0,0);
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_goToRowColumn>
		LCD_displayString("Distance= ");
    1108:	80 e6       	ldi	r24, 0x60	; 96
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <LCD_displayString>
		LCD_displayCharacter('0');
    1110:	80 e3       	ldi	r24, 0x30	; 48
    1112:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_displayCharacter>
		LCD_displayCharacter('0');
    1116:	80 e3       	ldi	r24, 0x30	; 48
    1118:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_displayCharacter>
		LCD_displayCharacter('0');
    111c:	80 e3       	ldi	r24, 0x30	; 48
    111e:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_displayCharacter>
		LCD_displayString(" CM");
    1122:	8b e6       	ldi	r24, 0x6B	; 107
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 90 15 	call	0x2b20	; 0x2b20 <LCD_displayString>
	}

	if (Distance < 3)
    112a:	89 8d       	ldd	r24, Y+25	; 0x19
    112c:	9a 8d       	ldd	r25, Y+26	; 0x1a
	{
	}

	if( Distance > 50  )
    112e:	89 8d       	ldd	r24, Y+25	; 0x19
    1130:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1132:	83 33       	cpi	r24, 0x33	; 51
    1134:	91 05       	cpc	r25, r1
    1136:	28 f0       	brcs	.+10     	; 0x1142 <Car_Move+0x29e>
	{
		carForward(Duty_H_80, Duty_L_80);
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	64 ef       	ldi	r22, 0xF4	; 244
    113c:	0e 94 1a 09 	call	0x1234	; 0x1234 <carForward>
    1140:	1e c0       	rjmp	.+60     	; 0x117e <Car_Move+0x2da>
	}else if (Distance > 40 && Distance <= 50)
    1142:	89 8d       	ldd	r24, Y+25	; 0x19
    1144:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1146:	89 32       	cpi	r24, 0x29	; 41
    1148:	91 05       	cpc	r25, r1
    114a:	50 f0       	brcs	.+20     	; 0x1160 <Car_Move+0x2bc>
    114c:	89 8d       	ldd	r24, Y+25	; 0x19
    114e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1150:	83 33       	cpi	r24, 0x33	; 51
    1152:	91 05       	cpc	r25, r1
    1154:	28 f4       	brcc	.+10     	; 0x1160 <Car_Move+0x2bc>
	{
		carForward(Duty_H_30, Duty_L_30);
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	6f ef       	ldi	r22, 0xFF	; 255
    115a:	0e 94 1a 09 	call	0x1234	; 0x1234 <carForward>
    115e:	0f c0       	rjmp	.+30     	; 0x117e <Car_Move+0x2da>
	}else if(Distance <= 40 && Distance >= 30)
    1160:	89 8d       	ldd	r24, Y+25	; 0x19
    1162:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1164:	89 32       	cpi	r24, 0x29	; 41
    1166:	91 05       	cpc	r25, r1
    1168:	40 f4       	brcc	.+16     	; 0x117a <Car_Move+0x2d6>
    116a:	89 8d       	ldd	r24, Y+25	; 0x19
    116c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    116e:	8e 31       	cpi	r24, 0x1E	; 30
    1170:	91 05       	cpc	r25, r1
    1172:	18 f0       	brcs	.+6      	; 0x117a <Car_Move+0x2d6>
	{
		carTurnRight();
    1174:	0e 94 cc 08 	call	0x1198	; 0x1198 <carTurnRight>
    1178:	02 c0       	rjmp	.+4      	; 0x117e <Car_Move+0x2da>
	}else
	{
		carBackWard();
    117a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <carBackWard>
	}

	Timer2_delay (60);
    117e:	8c e3       	ldi	r24, 0x3C	; 60
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <Timer2_delay>

}
    1186:	6c 96       	adiw	r28, 0x1c	; 28
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <carTurnRight>:

void carTurnRight()
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
	Timer1_PWM_Mode_Start(0,0);
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <Timer1_PWM_Mode_Start>
		Timer2_delay(250);
    11ac:	8a ef       	ldi	r24, 0xFA	; 250
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <Timer2_delay>
	DIO_vidWritePinValue(DIO_PD2, LOW_PIN); 		//M1 rotate right
    11b4:	8a e1       	ldi	r24, 0x1A	; 26
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	DIO_vidWritePinValue(DIO_PD3, HIGH_PIN);
    11bc:	8b e1       	ldi	r24, 0x1B	; 27
    11be:	61 e0       	ldi	r22, 0x01	; 1
    11c0:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>

	Timer1_PWM_Mode_Start(Duty_H_25,Duty_L_25);
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	6f ef       	ldi	r22, 0xFF	; 255
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <Timer1_PWM_Mode_Start>
	Timer2_delay(1000);
    11d0:	88 ee       	ldi	r24, 0xE8	; 232
    11d2:	93 e0       	ldi	r25, 0x03	; 3
    11d4:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <Timer2_delay>
	Timer1_PWM_Mode_Start(Duty_H_0,Duty_L_0);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <Timer1_PWM_Mode_Start>

	DIO_vidWritePinValue(DIO_PD2, HIGH_PIN); 		//M1
    11e4:	8a e1       	ldi	r24, 0x1A	; 26
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	DIO_vidWritePinValue(DIO_PD3, LOW_PIN);
    11ec:	8b e1       	ldi	r24, 0x1B	; 27
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <carBackWard>:

void carBackWard ()
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
	DIO_vidWritePinValue(DIO_PD3, LOW_PIN); 		//M1 rotate right
    1202:	8b e1       	ldi	r24, 0x1B	; 27
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	DIO_vidWritePinValue(DIO_PD2, HIGH_PIN);
    120a:	8a e1       	ldi	r24, 0x1A	; 26
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	DIO_vidWritePinValue(DIO_PD7, LOW_PIN); 		//M1
    1212:	8f e1       	ldi	r24, 0x1F	; 31
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	DIO_vidWritePinValue(DIO_PD6, HIGH_PIN);
    121a:	8e e1       	ldi	r24, 0x1E	; 30
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	Timer1_PWM_Mode_Start(Duty_H_25,Duty_L_25);
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	6f ef       	ldi	r22, 0xFF	; 255
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <Timer1_PWM_Mode_Start>
}
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <carForward>:

void carForward (uint8 high, uint8 low)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <carForward+0x6>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vidWritePinValue(DIO_PD2, LOW_PIN); 		//M1 rotate right
    1242:	8a e1       	ldi	r24, 0x1A	; 26
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	DIO_vidWritePinValue(DIO_PD3, HIGH_PIN);
    124a:	8b e1       	ldi	r24, 0x1B	; 27
    124c:	61 e0       	ldi	r22, 0x01	; 1
    124e:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	DIO_vidWritePinValue(DIO_PD6, LOW_PIN); 		//M1
    1252:	8e e1       	ldi	r24, 0x1E	; 30
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	DIO_vidWritePinValue(DIO_PD7, HIGH_PIN);
    125a:	8f e1       	ldi	r24, 0x1F	; 31
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_vidWritePinValue>
	Timer1_PWM_Mode_Start(high,low);
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	48 2f       	mov	r20, r24
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	ca 01       	movw	r24, r20
    1270:	b9 01       	movw	r22, r18
    1272:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <Timer1_PWM_Mode_Start>
}
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <DIO_vidWritePinValue>:
/* Description! Interface to set the Output value of the pin                           */
/* Input      ! Pin number , Value to set                                			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void DIO_vidWritePinValue(uint8 uint8PinNumberCpy,uint8 uint8ValueCpy)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	00 d0       	rcall	.+0      	; 0x1286 <DIO_vidWritePinValue+0x6>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_vidWritePinValue+0x8>
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8a 83       	std	Y+2, r24	; 0x02
    1290:	6b 83       	std	Y+3, r22	; 0x03
	uint8 uint8PortNumberCpy = (uint8PinNumberCpy / 8);
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	86 95       	lsr	r24
    1296:	86 95       	lsr	r24
    1298:	86 95       	lsr	r24
    129a:	89 83       	std	Y+1, r24	; 0x01
	uint8PinNumberCpy %= 8;
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	87 70       	andi	r24, 0x07	; 7
    12a0:	8a 83       	std	Y+2, r24	; 0x02

	switch(uint8PortNumberCpy)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3d 83       	std	Y+5, r19	; 0x05
    12aa:	2c 83       	std	Y+4, r18	; 0x04
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	91 05       	cpc	r25, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <DIO_vidWritePinValue+0x38>
    12b6:	43 c0       	rjmp	.+134    	; 0x133e <DIO_vidWritePinValue+0xbe>
    12b8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ba:	3d 81       	ldd	r19, Y+5	; 0x05
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	2c f4       	brge	.+10     	; 0x12cc <DIO_vidWritePinValue+0x4c>
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <DIO_vidWritePinValue+0x66>
    12ca:	bc c0       	rjmp	.+376    	; 0x1444 <DIO_vidWritePinValue+0x1c4>
    12cc:	2c 81       	ldd	r18, Y+4	; 0x04
    12ce:	3d 81       	ldd	r19, Y+5	; 0x05
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <DIO_vidWritePinValue+0x58>
    12d6:	5f c0       	rjmp	.+190    	; 0x1396 <DIO_vidWritePinValue+0x116>
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <DIO_vidWritePinValue+0x64>
    12e2:	85 c0       	rjmp	.+266    	; 0x13ee <DIO_vidWritePinValue+0x16e>
    12e4:	af c0       	rjmp	.+350    	; 0x1444 <DIO_vidWritePinValue+0x1c4>
	{
		case DIO_PORTA:
			if(uint8ValueCpy==HIGH_PIN)
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	a1 f4       	brne	.+40     	; 0x1314 <DIO_vidWritePinValue+0x94>
			{
				SET_BIT(PORTA,uint8PinNumberCpy);
    12ec:	ab e3       	ldi	r26, 0x3B	; 59
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	eb e3       	ldi	r30, 0x3B	; 59
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_vidWritePinValue+0x8a>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_vidWritePinValue+0x86>
    130e:	84 2b       	or	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	98 c0       	rjmp	.+304    	; 0x1444 <DIO_vidWritePinValue+0x1c4>
			}
			else
			{
				CLEAR_BIT(PORTA,uint8PinNumberCpy);
    1314:	ab e3       	ldi	r26, 0x3B	; 59
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	eb e3       	ldi	r30, 0x3B	; 59
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_vidWritePinValue+0xb2>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_vidWritePinValue+0xae>
    1336:	80 95       	com	r24
    1338:	84 23       	and	r24, r20
    133a:	8c 93       	st	X, r24
    133c:	83 c0       	rjmp	.+262    	; 0x1444 <DIO_vidWritePinValue+0x1c4>
			}
		break;
		case DIO_PORTB:
			if(uint8ValueCpy==HIGH_PIN)
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	a1 f4       	brne	.+40     	; 0x136c <DIO_vidWritePinValue+0xec>
			{
				SET_BIT(PORTB,uint8PinNumberCpy);
    1344:	a8 e3       	ldi	r26, 0x38	; 56
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e8 e3       	ldi	r30, 0x38	; 56
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_vidWritePinValue+0xe2>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_vidWritePinValue+0xde>
    1366:	84 2b       	or	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	6c c0       	rjmp	.+216    	; 0x1444 <DIO_vidWritePinValue+0x1c4>
			}
			else
			{
				CLEAR_BIT(PORTB,uint8PinNumberCpy);
    136c:	a8 e3       	ldi	r26, 0x38	; 56
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e8 e3       	ldi	r30, 0x38	; 56
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_vidWritePinValue+0x10a>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_vidWritePinValue+0x106>
    138e:	80 95       	com	r24
    1390:	84 23       	and	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	57 c0       	rjmp	.+174    	; 0x1444 <DIO_vidWritePinValue+0x1c4>
			}
		break;
		case DIO_PORTC:
			if(uint8ValueCpy==HIGH_PIN)
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	a1 f4       	brne	.+40     	; 0x13c4 <DIO_vidWritePinValue+0x144>
			{
				SET_BIT(PORTC,uint8PinNumberCpy);
    139c:	a5 e3       	ldi	r26, 0x35	; 53
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e3       	ldi	r30, 0x35	; 53
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_vidWritePinValue+0x13a>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_vidWritePinValue+0x136>
    13be:	84 2b       	or	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	40 c0       	rjmp	.+128    	; 0x1444 <DIO_vidWritePinValue+0x1c4>
			}
			else
			{
				CLEAR_BIT(PORTC,uint8PinNumberCpy);
    13c4:	a5 e3       	ldi	r26, 0x35	; 53
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e5 e3       	ldi	r30, 0x35	; 53
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_vidWritePinValue+0x162>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_vidWritePinValue+0x15e>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	2b c0       	rjmp	.+86     	; 0x1444 <DIO_vidWritePinValue+0x1c4>
			}
		break;
		case DIO_PORTD:
			if(uint8ValueCpy==HIGH_PIN)
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	a1 f4       	brne	.+40     	; 0x141c <DIO_vidWritePinValue+0x19c>
			{
				SET_BIT(PORTD,uint8PinNumberCpy);
    13f4:	a2 e3       	ldi	r26, 0x32	; 50
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e2 e3       	ldi	r30, 0x32	; 50
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_vidWritePinValue+0x192>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_vidWritePinValue+0x18e>
    1416:	84 2b       	or	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	14 c0       	rjmp	.+40     	; 0x1444 <DIO_vidWritePinValue+0x1c4>
			}
			else
			{
				CLEAR_BIT(PORTD,uint8PinNumberCpy);
    141c:	a2 e3       	ldi	r26, 0x32	; 50
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e2 e3       	ldi	r30, 0x32	; 50
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_vidWritePinValue+0x1ba>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_vidWritePinValue+0x1b6>
    143e:	80 95       	com	r24
    1440:	84 23       	and	r24, r20
    1442:	8c 93       	st	X, r24
			}
		break;
	}
}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DIO_uint8ReadPinValue>:
/* Description! Interface to read an input digital pin                                 */
/* Input      ! Pin number                                               			   */
/* Output     ! uint8 contains the Pin value                                           */
/***************************************************************************************/
uint8 DIO_uint8ReadPinValue(uint8 uint8PinNumberCpy)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_uint8ReadPinValue+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <DIO_uint8ReadPinValue+0x8>
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Loc_uint8PinValue=0;
    1464:	1a 82       	std	Y+2, r1	; 0x02
	uint8 uint8PortNumberCpy = (uint8PinNumberCpy / 8);
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	86 95       	lsr	r24
    146a:	86 95       	lsr	r24
    146c:	86 95       	lsr	r24
    146e:	89 83       	std	Y+1, r24	; 0x01
	uint8PinNumberCpy %= 8;
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	87 70       	andi	r24, 0x07	; 7
    1474:	8b 83       	std	Y+3, r24	; 0x03

	switch(uint8PortNumberCpy)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3d 83       	std	Y+5, r19	; 0x05
    147e:	2c 83       	std	Y+4, r18	; 0x04
    1480:	4c 81       	ldd	r20, Y+4	; 0x04
    1482:	5d 81       	ldd	r21, Y+5	; 0x05
    1484:	41 30       	cpi	r20, 0x01	; 1
    1486:	51 05       	cpc	r21, r1
    1488:	41 f1       	breq	.+80     	; 0x14da <DIO_uint8ReadPinValue+0x86>
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	9d 81       	ldd	r25, Y+5	; 0x05
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	91 05       	cpc	r25, r1
    1492:	34 f4       	brge	.+12     	; 0x14a0 <DIO_uint8ReadPinValue+0x4c>
    1494:	2c 81       	ldd	r18, Y+4	; 0x04
    1496:	3d 81       	ldd	r19, Y+5	; 0x05
    1498:	21 15       	cp	r18, r1
    149a:	31 05       	cpc	r19, r1
    149c:	61 f0       	breq	.+24     	; 0x14b6 <DIO_uint8ReadPinValue+0x62>
    149e:	52 c0       	rjmp	.+164    	; 0x1544 <DIO_uint8ReadPinValue+0xf0>
    14a0:	4c 81       	ldd	r20, Y+4	; 0x04
    14a2:	5d 81       	ldd	r21, Y+5	; 0x05
    14a4:	42 30       	cpi	r20, 0x02	; 2
    14a6:	51 05       	cpc	r21, r1
    14a8:	51 f1       	breq	.+84     	; 0x14fe <DIO_uint8ReadPinValue+0xaa>
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	91 05       	cpc	r25, r1
    14b2:	b9 f1       	breq	.+110    	; 0x1522 <DIO_uint8ReadPinValue+0xce>
    14b4:	47 c0       	rjmp	.+142    	; 0x1544 <DIO_uint8ReadPinValue+0xf0>
	{
		case DIO_PORTA:

			Loc_uint8PinValue=GET_BIT(PINA,uint8PinNumberCpy);
    14b6:	e9 e3       	ldi	r30, 0x39	; 57
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a9 01       	movw	r20, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_uint8ReadPinValue+0x7a>
    14ca:	55 95       	asr	r21
    14cc:	47 95       	ror	r20
    14ce:	8a 95       	dec	r24
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <DIO_uint8ReadPinValue+0x76>
    14d2:	ca 01       	movw	r24, r20
    14d4:	81 70       	andi	r24, 0x01	; 1
    14d6:	8a 83       	std	Y+2, r24	; 0x02
    14d8:	35 c0       	rjmp	.+106    	; 0x1544 <DIO_uint8ReadPinValue+0xf0>
		break;
		case DIO_PORTB:

			Loc_uint8PinValue=GET_BIT(PINB,uint8PinNumberCpy);
    14da:	e6 e3       	ldi	r30, 0x36	; 54
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_uint8ReadPinValue+0x9e>
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_uint8ReadPinValue+0x9a>
    14f6:	ca 01       	movw	r24, r20
    14f8:	81 70       	andi	r24, 0x01	; 1
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	23 c0       	rjmp	.+70     	; 0x1544 <DIO_uint8ReadPinValue+0xf0>
			break;
		case DIO_PORTC:

			Loc_uint8PinValue=GET_BIT(PINC,uint8PinNumberCpy);
    14fe:	e3 e3       	ldi	r30, 0x33	; 51
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIO_uint8ReadPinValue+0xc2>
    1512:	55 95       	asr	r21
    1514:	47 95       	ror	r20
    1516:	8a 95       	dec	r24
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIO_uint8ReadPinValue+0xbe>
    151a:	ca 01       	movw	r24, r20
    151c:	81 70       	andi	r24, 0x01	; 1
    151e:	8a 83       	std	Y+2, r24	; 0x02
    1520:	11 c0       	rjmp	.+34     	; 0x1544 <DIO_uint8ReadPinValue+0xf0>
		break;
		case DIO_PORTD:

			Loc_uint8PinValue=GET_BIT(PIND,uint8PinNumberCpy);
    1522:	e0 e3       	ldi	r30, 0x30	; 48
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a9 01       	movw	r20, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_uint8ReadPinValue+0xe6>
    1536:	55 95       	asr	r21
    1538:	47 95       	ror	r20
    153a:	8a 95       	dec	r24
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_uint8ReadPinValue+0xe2>
    153e:	ca 01       	movw	r24, r20
    1540:	81 70       	andi	r24, 0x01	; 1
    1542:	8a 83       	std	Y+2, r24	; 0x02
		break;
	}
	return Loc_uint8PinValue;
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <DIO_vidSetPinDirection>:
/* Description! Interface to Set the direction of PIN                                  */
/* Input      ! Pin number, Desired Direction                            			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void DIO_vidSetPinDirection(uint8 uint8PinNumberCpy,uint8 uint8DirectionCpy)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <DIO_vidSetPinDirection+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <DIO_vidSetPinDirection+0x8>
    155e:	0f 92       	push	r0
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	8a 83       	std	Y+2, r24	; 0x02
    1566:	6b 83       	std	Y+3, r22	; 0x03
	uint8 uint8PortNumberCpy = (uint8PinNumberCpy / 8);
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	86 95       	lsr	r24
    156c:	86 95       	lsr	r24
    156e:	86 95       	lsr	r24
    1570:	89 83       	std	Y+1, r24	; 0x01
	uint8PinNumberCpy %= 8;
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	87 70       	andi	r24, 0x07	; 7
    1576:	8a 83       	std	Y+2, r24	; 0x02

	switch(uint8PortNumberCpy)
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	3d 83       	std	Y+5, r19	; 0x05
    1580:	2c 83       	std	Y+4, r18	; 0x04
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	9d 81       	ldd	r25, Y+5	; 0x05
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	91 05       	cpc	r25, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <DIO_vidSetPinDirection+0x38>
    158c:	43 c0       	rjmp	.+134    	; 0x1614 <DIO_vidSetPinDirection+0xbe>
    158e:	2c 81       	ldd	r18, Y+4	; 0x04
    1590:	3d 81       	ldd	r19, Y+5	; 0x05
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	2c f4       	brge	.+10     	; 0x15a2 <DIO_vidSetPinDirection+0x4c>
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	71 f0       	breq	.+28     	; 0x15bc <DIO_vidSetPinDirection+0x66>
    15a0:	bc c0       	rjmp	.+376    	; 0x171a <DIO_vidSetPinDirection+0x1c4>
    15a2:	2c 81       	ldd	r18, Y+4	; 0x04
    15a4:	3d 81       	ldd	r19, Y+5	; 0x05
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <DIO_vidSetPinDirection+0x58>
    15ac:	5f c0       	rjmp	.+190    	; 0x166c <DIO_vidSetPinDirection+0x116>
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	9d 81       	ldd	r25, Y+5	; 0x05
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	91 05       	cpc	r25, r1
    15b6:	09 f4       	brne	.+2      	; 0x15ba <DIO_vidSetPinDirection+0x64>
    15b8:	85 c0       	rjmp	.+266    	; 0x16c4 <DIO_vidSetPinDirection+0x16e>
    15ba:	af c0       	rjmp	.+350    	; 0x171a <DIO_vidSetPinDirection+0x1c4>
	{
		case DIO_PORTA:
			if(uint8DirectionCpy==OUTPUT_PIN)
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	a1 f4       	brne	.+40     	; 0x15ea <DIO_vidSetPinDirection+0x94>
			{
				SET_BIT(DDRA,uint8PinNumberCpy);
    15c2:	aa e3       	ldi	r26, 0x3A	; 58
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	ea e3       	ldi	r30, 0x3A	; 58
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <DIO_vidSetPinDirection+0x8a>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <DIO_vidSetPinDirection+0x86>
    15e4:	84 2b       	or	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	98 c0       	rjmp	.+304    	; 0x171a <DIO_vidSetPinDirection+0x1c4>
			}
			else
			{
				CLEAR_BIT(DDRA,uint8PinNumberCpy);
    15ea:	aa e3       	ldi	r26, 0x3A	; 58
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	ea e3       	ldi	r30, 0x3A	; 58
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DIO_vidSetPinDirection+0xb2>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <DIO_vidSetPinDirection+0xae>
    160c:	80 95       	com	r24
    160e:	84 23       	and	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	83 c0       	rjmp	.+262    	; 0x171a <DIO_vidSetPinDirection+0x1c4>
			}
		break;

		case DIO_PORTB:
			if(uint8DirectionCpy==OUTPUT_PIN)
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	a1 f4       	brne	.+40     	; 0x1642 <DIO_vidSetPinDirection+0xec>
			{
				SET_BIT(DDRB,uint8PinNumberCpy);
    161a:	a7 e3       	ldi	r26, 0x37	; 55
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e7 e3       	ldi	r30, 0x37	; 55
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <DIO_vidSetPinDirection+0xe2>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <DIO_vidSetPinDirection+0xde>
    163c:	84 2b       	or	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	6c c0       	rjmp	.+216    	; 0x171a <DIO_vidSetPinDirection+0x1c4>
			}
			else
			{
				CLEAR_BIT(DDRB,uint8PinNumberCpy);
    1642:	a7 e3       	ldi	r26, 0x37	; 55
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e7 e3       	ldi	r30, 0x37	; 55
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_vidSetPinDirection+0x10a>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <DIO_vidSetPinDirection+0x106>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	57 c0       	rjmp	.+174    	; 0x171a <DIO_vidSetPinDirection+0x1c4>
			}
		break;

		case DIO_PORTC:
			if(uint8DirectionCpy==OUTPUT_PIN)
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	a1 f4       	brne	.+40     	; 0x169a <DIO_vidSetPinDirection+0x144>
			{
				SET_BIT(DDRC,uint8PinNumberCpy);
    1672:	a4 e3       	ldi	r26, 0x34	; 52
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e4 e3       	ldi	r30, 0x34	; 52
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_vidSetPinDirection+0x13a>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_vidSetPinDirection+0x136>
    1694:	84 2b       	or	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	40 c0       	rjmp	.+128    	; 0x171a <DIO_vidSetPinDirection+0x1c4>
			}
			else
			{
				CLEAR_BIT(DDRC,uint8PinNumberCpy);
    169a:	a4 e3       	ldi	r26, 0x34	; 52
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e4 e3       	ldi	r30, 0x34	; 52
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_vidSetPinDirection+0x162>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <DIO_vidSetPinDirection+0x15e>
    16bc:	80 95       	com	r24
    16be:	84 23       	and	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	2b c0       	rjmp	.+86     	; 0x171a <DIO_vidSetPinDirection+0x1c4>
			}
		break;

		case DIO_PORTD:
			if(uint8DirectionCpy==OUTPUT_PIN)
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	a1 f4       	brne	.+40     	; 0x16f2 <DIO_vidSetPinDirection+0x19c>
			{
				SET_BIT(DDRD,uint8PinNumberCpy);
    16ca:	a1 e3       	ldi	r26, 0x31	; 49
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e1 e3       	ldi	r30, 0x31	; 49
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_vidSetPinDirection+0x192>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_vidSetPinDirection+0x18e>
    16ec:	84 2b       	or	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	14 c0       	rjmp	.+40     	; 0x171a <DIO_vidSetPinDirection+0x1c4>
			}
			else
			{
				CLEAR_BIT(DDRD,uint8PinNumberCpy);
    16f2:	a1 e3       	ldi	r26, 0x31	; 49
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e1 e3       	ldi	r30, 0x31	; 49
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_vidSetPinDirection+0x1ba>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_vidSetPinDirection+0x1b6>
    1714:	80 95       	com	r24
    1716:	84 23       	and	r24, r20
    1718:	8c 93       	st	X, r24
			}
		break;
	}
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <DIO_vidSetPortDirection>:
/* Description! Interface to set port direction                                        */
/* Input      ! Port number , Desired Direction                                        */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void DIO_vidSetPortDirection(uint8 uint8PortNumberCpy,uint8 uint8ValueCpy)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	00 d0       	rcall	.+0      	; 0x1730 <DIO_vidSetPortDirection+0x6>
    1730:	00 d0       	rcall	.+0      	; 0x1732 <DIO_vidSetPortDirection+0x8>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	6a 83       	std	Y+2, r22	; 0x02
	switch(uint8PortNumberCpy)
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	3c 83       	std	Y+4, r19	; 0x04
    1742:	2b 83       	std	Y+3, r18	; 0x03
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	91 05       	cpc	r25, r1
    174c:	d1 f0       	breq	.+52     	; 0x1782 <DIO_vidSetPortDirection+0x58>
    174e:	2b 81       	ldd	r18, Y+3	; 0x03
    1750:	3c 81       	ldd	r19, Y+4	; 0x04
    1752:	22 30       	cpi	r18, 0x02	; 2
    1754:	31 05       	cpc	r19, r1
    1756:	2c f4       	brge	.+10     	; 0x1762 <DIO_vidSetPortDirection+0x38>
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	61 f0       	breq	.+24     	; 0x1778 <DIO_vidSetPortDirection+0x4e>
    1760:	1e c0       	rjmp	.+60     	; 0x179e <DIO_vidSetPortDirection+0x74>
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	81 f0       	breq	.+32     	; 0x178c <DIO_vidSetPortDirection+0x62>
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	91 05       	cpc	r25, r1
    1774:	81 f0       	breq	.+32     	; 0x1796 <DIO_vidSetPortDirection+0x6c>
    1776:	13 c0       	rjmp	.+38     	; 0x179e <DIO_vidSetPortDirection+0x74>
	{
		case DIO_PORTA:

			DDRA = uint8ValueCpy;
    1778:	ea e3       	ldi	r30, 0x3A	; 58
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24
    1780:	0e c0       	rjmp	.+28     	; 0x179e <DIO_vidSetPortDirection+0x74>
		break;

		case DIO_PORTB:

			DDRB = uint8ValueCpy;
    1782:	e7 e3       	ldi	r30, 0x37	; 55
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	80 83       	st	Z, r24
    178a:	09 c0       	rjmp	.+18     	; 0x179e <DIO_vidSetPortDirection+0x74>
		break;

		case DIO_PORTC:

			DDRC = uint8ValueCpy;
    178c:	e4 e3       	ldi	r30, 0x34	; 52
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	80 83       	st	Z, r24
    1794:	04 c0       	rjmp	.+8      	; 0x179e <DIO_vidSetPortDirection+0x74>
		break;

		case DIO_PORTD:

			DDRD = uint8ValueCpy;
    1796:	e1 e3       	ldi	r30, 0x31	; 49
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	80 83       	st	Z, r24
		break;
	}
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <DIO_vidWritePortValue>:
/* Description! Interface to set the output value of port                              */
/* Input      ! Port number , Desired output value                                     */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void DIO_vidWritePortValue(uint8 uint8PortNumberCpy,uint8 uint8ValueCpy)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <DIO_vidWritePortValue+0x6>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <DIO_vidWritePortValue+0x8>
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(uint8PortNumberCpy)
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	3c 83       	std	Y+4, r19	; 0x04
    17c4:	2b 83       	std	Y+3, r18	; 0x03
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	91 05       	cpc	r25, r1
    17ce:	d1 f0       	breq	.+52     	; 0x1804 <DIO_vidWritePortValue+0x58>
    17d0:	2b 81       	ldd	r18, Y+3	; 0x03
    17d2:	3c 81       	ldd	r19, Y+4	; 0x04
    17d4:	22 30       	cpi	r18, 0x02	; 2
    17d6:	31 05       	cpc	r19, r1
    17d8:	2c f4       	brge	.+10     	; 0x17e4 <DIO_vidWritePortValue+0x38>
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	61 f0       	breq	.+24     	; 0x17fa <DIO_vidWritePortValue+0x4e>
    17e2:	1e c0       	rjmp	.+60     	; 0x1820 <DIO_vidWritePortValue+0x74>
    17e4:	2b 81       	ldd	r18, Y+3	; 0x03
    17e6:	3c 81       	ldd	r19, Y+4	; 0x04
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	81 f0       	breq	.+32     	; 0x180e <DIO_vidWritePortValue+0x62>
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	83 30       	cpi	r24, 0x03	; 3
    17f4:	91 05       	cpc	r25, r1
    17f6:	81 f0       	breq	.+32     	; 0x1818 <DIO_vidWritePortValue+0x6c>
    17f8:	13 c0       	rjmp	.+38     	; 0x1820 <DIO_vidWritePortValue+0x74>
	{
		case DIO_PORTA:

			PORTA=uint8ValueCpy; // 3shan ana bn2l data msh bs 0 aw 1
    17fa:	eb e3       	ldi	r30, 0x3B	; 59
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	80 83       	st	Z, r24
    1802:	0e c0       	rjmp	.+28     	; 0x1820 <DIO_vidWritePortValue+0x74>
		break;

		case DIO_PORTB:

			PORTB=uint8ValueCpy;
    1804:	e8 e3       	ldi	r30, 0x38	; 56
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	80 83       	st	Z, r24
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <DIO_vidWritePortValue+0x74>
		break;

		case DIO_PORTC:

			PORTC=uint8ValueCpy;
    180e:	e5 e3       	ldi	r30, 0x35	; 53
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	80 83       	st	Z, r24
    1816:	04 c0       	rjmp	.+8      	; 0x1820 <DIO_vidWritePortValue+0x74>
		break;

		case DIO_PORTD:

			PORTD=uint8ValueCpy;
    1818:	e2 e3       	ldi	r30, 0x32	; 50
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	80 83       	st	Z, r24
		break;
	}
}
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <DIO_uint8ReadPortValue>:
/* Description! Interface to get the input value on Port                               */
/* Input      ! Port number                                                            */
/* Output     ! Port Value                                                             */
/***************************************************************************************/
uint8 DIO_uint8ReadPortValue(uint8 uint8PortNumberCpy)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_uint8ReadPortValue+0x6>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <DIO_uint8ReadPortValue+0x8>
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LOC_uint8Return = 0x00;
    183c:	19 82       	std	Y+1, r1	; 0x01
	switch(uint8PortNumberCpy)
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3c 83       	std	Y+4, r19	; 0x04
    1846:	2b 83       	std	Y+3, r18	; 0x03
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	91 05       	cpc	r25, r1
    1850:	d1 f0       	breq	.+52     	; 0x1886 <DIO_uint8ReadPortValue+0x58>
    1852:	2b 81       	ldd	r18, Y+3	; 0x03
    1854:	3c 81       	ldd	r19, Y+4	; 0x04
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	2c f4       	brge	.+10     	; 0x1866 <DIO_uint8ReadPortValue+0x38>
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	61 f0       	breq	.+24     	; 0x187c <DIO_uint8ReadPortValue+0x4e>
    1864:	1e c0       	rjmp	.+60     	; 0x18a2 <DIO_uint8ReadPortValue+0x74>
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	81 f0       	breq	.+32     	; 0x1890 <DIO_uint8ReadPortValue+0x62>
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	91 05       	cpc	r25, r1
    1878:	81 f0       	breq	.+32     	; 0x189a <DIO_uint8ReadPortValue+0x6c>
    187a:	13 c0       	rjmp	.+38     	; 0x18a2 <DIO_uint8ReadPortValue+0x74>
	{
		case DIO_PORTA:

			LOC_uint8Return = PINA;
    187c:	e9 e3       	ldi	r30, 0x39	; 57
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	0e c0       	rjmp	.+28     	; 0x18a2 <DIO_uint8ReadPortValue+0x74>
		break;
		case DIO_PORTB:
			LOC_uint8Return = PINB;
    1886:	e6 e3       	ldi	r30, 0x36	; 54
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <DIO_uint8ReadPortValue+0x74>
		break;
		case DIO_PORTC:
			LOC_uint8Return = PINC;
    1890:	e3 e3       	ldi	r30, 0x33	; 51
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <DIO_uint8ReadPortValue+0x74>
		break;
		case DIO_PORTD:
			LOC_uint8Return = PIND;
    189a:	e0 e3       	ldi	r30, 0x30	; 48
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return LOC_uint8Return;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <ICU_Init>:
uint8  volatile state;
float32 volatile T_on;
float32 volatile T_off;

void ICU_Init(void)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	INTERRUPT_VidInit();
    18ba:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <INTERRUPT_VidInit>
	TIMER_vidInit();
    18be:	0e 94 41 16 	call	0x2c82	; 0x2c82 <TIMER_vidInit>
}
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <ICU_Read>:

void ICU_Read(void)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	if(first_riding==0)
    18d0:	80 91 78 01 	lds	r24, 0x0178
    18d4:	88 23       	and	r24, r24
    18d6:	c9 f4       	brne	.+50     	; 0x190a <ICU_Read+0x42>
	{
		TCNT0=0;
    18d8:	e2 e5       	ldi	r30, 0x52	; 82
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	10 82       	st	Z, r1
		ovf_counter=0;
    18de:	10 92 79 01 	sts	0x0179, r1
    18e2:	10 92 7a 01 	sts	0x017A, r1
    18e6:	10 92 7b 01 	sts	0x017B, r1
    18ea:	10 92 7c 01 	sts	0x017C, r1
		first_riding=1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	80 93 78 01 	sts	0x0178, r24
		state=1;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	80 93 7d 01 	sts	0x017D, r24
		CLEAR_BIT(MCUCSR,6); 	//falling
    18fa:	a4 e5       	ldi	r26, 0x54	; 84
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e4 e5       	ldi	r30, 0x54	; 84
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8f 7b       	andi	r24, 0xBF	; 191
    1906:	8c 93       	st	X, r24
    1908:	8d c0       	rjmp	.+282    	; 0x1a24 <ICU_Read+0x15c>
	}

	else
	{
		if(state==1)
    190a:	80 91 7d 01 	lds	r24, 0x017D
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	09 f0       	breq	.+2      	; 0x1914 <ICU_Read+0x4c>
    1912:	44 c0       	rjmp	.+136    	; 0x199c <ICU_Read+0xd4>
		{
			T_on=(float32)((TCNT0+(ovf_counter*256))*(float32)((float32)1/16000000));
    1914:	e2 e5       	ldi	r30, 0x52	; 82
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	80 91 79 01 	lds	r24, 0x0179
    1926:	90 91 7a 01 	lds	r25, 0x017A
    192a:	a0 91 7b 01 	lds	r26, 0x017B
    192e:	b0 91 7c 01 	lds	r27, 0x017C
    1932:	ba 2f       	mov	r27, r26
    1934:	a9 2f       	mov	r26, r25
    1936:	98 2f       	mov	r25, r24
    1938:	88 27       	eor	r24, r24
    193a:	82 0f       	add	r24, r18
    193c:	93 1f       	adc	r25, r19
    193e:	a4 1f       	adc	r26, r20
    1940:	b5 1f       	adc	r27, r21
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	2d eb       	ldi	r18, 0xBD	; 189
    1954:	37 e3       	ldi	r19, 0x37	; 55
    1956:	46 e8       	ldi	r20, 0x86	; 134
    1958:	53 e3       	ldi	r21, 0x33	; 51
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	80 93 82 01 	sts	0x0182, r24
    1966:	90 93 83 01 	sts	0x0183, r25
    196a:	a0 93 84 01 	sts	0x0184, r26
    196e:	b0 93 85 01 	sts	0x0185, r27
			state=0;
    1972:	10 92 7d 01 	sts	0x017D, r1
			ovf_counter=0;
    1976:	10 92 79 01 	sts	0x0179, r1
    197a:	10 92 7a 01 	sts	0x017A, r1
    197e:	10 92 7b 01 	sts	0x017B, r1
    1982:	10 92 7c 01 	sts	0x017C, r1
			TCNT0=0;
    1986:	e2 e5       	ldi	r30, 0x52	; 82
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	10 82       	st	Z, r1
			SET_BIT(MCUCSR,6); 	//rising
    198c:	a4 e5       	ldi	r26, 0x54	; 84
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e4 e5       	ldi	r30, 0x54	; 84
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	80 64       	ori	r24, 0x40	; 64
    1998:	8c 93       	st	X, r24
    199a:	44 c0       	rjmp	.+136    	; 0x1a24 <ICU_Read+0x15c>
		}
		else
		{
			T_off=(float32)((TCNT0+(ovf_counter*256))*(float32)((float32)1/16000000));
    199c:	e2 e5       	ldi	r30, 0x52	; 82
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	80 91 79 01 	lds	r24, 0x0179
    19ae:	90 91 7a 01 	lds	r25, 0x017A
    19b2:	a0 91 7b 01 	lds	r26, 0x017B
    19b6:	b0 91 7c 01 	lds	r27, 0x017C
    19ba:	ba 2f       	mov	r27, r26
    19bc:	a9 2f       	mov	r26, r25
    19be:	98 2f       	mov	r25, r24
    19c0:	88 27       	eor	r24, r24
    19c2:	82 0f       	add	r24, r18
    19c4:	93 1f       	adc	r25, r19
    19c6:	a4 1f       	adc	r26, r20
    19c8:	b5 1f       	adc	r27, r21
    19ca:	bc 01       	movw	r22, r24
    19cc:	cd 01       	movw	r24, r26
    19ce:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	2d eb       	ldi	r18, 0xBD	; 189
    19dc:	37 e3       	ldi	r19, 0x37	; 55
    19de:	46 e8       	ldi	r20, 0x86	; 134
    19e0:	53 e3       	ldi	r21, 0x33	; 51
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	80 93 7e 01 	sts	0x017E, r24
    19ee:	90 93 7f 01 	sts	0x017F, r25
    19f2:	a0 93 80 01 	sts	0x0180, r26
    19f6:	b0 93 81 01 	sts	0x0181, r27
			state=1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 93 7d 01 	sts	0x017D, r24
			ovf_counter=0;
    1a00:	10 92 79 01 	sts	0x0179, r1
    1a04:	10 92 7a 01 	sts	0x017A, r1
    1a08:	10 92 7b 01 	sts	0x017B, r1
    1a0c:	10 92 7c 01 	sts	0x017C, r1
			TCNT0=0;
    1a10:	e2 e5       	ldi	r30, 0x52	; 82
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	10 82       	st	Z, r1
			CLEAR_BIT(MCUCSR,6); 	//falling
    1a16:	a4 e5       	ldi	r26, 0x54	; 84
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e4 e5       	ldi	r30, 0x54	; 84
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	8f 7b       	andi	r24, 0xBF	; 191
    1a22:	8c 93       	st	X, r24
		}
	}
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <INTERRUPT_VidInit>:
#include "INTERRUPT_private.h"



void INTERRUPT_VidInit(void)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);        //set global interrupt enable
    1a32:	af e5       	ldi	r26, 0x5F	; 95
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	ef e5       	ldi	r30, 0x5F	; 95
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	80 68       	ori	r24, 0x80	; 128
    1a3e:	8c 93       	st	X, r24

	SET_BIT(MCUCSR,6); 	   //set INT2 as rising edge
    1a40:	a4 e5       	ldi	r26, 0x54	; 84
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e4 e5       	ldi	r30, 0x54	; 84
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 64       	ori	r24, 0x40	; 64
    1a4c:	8c 93       	st	X, r24

	SET_BIT(GICR,5); 		//set INT2 enable
    1a4e:	ab e5       	ldi	r26, 0x5B	; 91
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	eb e5       	ldi	r30, 0x5B	; 91
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 62       	ori	r24, 0x20	; 32
    1a5a:	8c 93       	st	X, r24

	DIO_vidSetPinDirection(DIO_PB2,INPUT_PIN);
    1a5c:	8a e0       	ldi	r24, 0x0A	; 10
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_vidSetPinDirection>
}
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1a72:	aa e3       	ldi	r26, 0x3A	; 58
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	ea e3       	ldi	r30, 0x3A	; 58
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8e 60       	ori	r24, 0x0E	; 14
    1a7e:	8c 93       	st	X, r24

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1a80:	aa e3       	ldi	r26, 0x3A	; 58
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ea e3       	ldi	r30, 0x3A	; 58
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	80 6f       	ori	r24, 0xF0	; 240
    1a8c:	8c 93       	st	X, r24

		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	0e 94 56 0d 	call	0x1aac	; 0x1aac <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1a94:	88 e2       	ldi	r24, 0x28	; 40
    1a96:	0e 94 56 0d 	call	0x1aac	; 0x1aac <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1a9a:	8c e0       	ldi	r24, 0x0C	; 12
    1a9c:	0e 94 56 0d 	call	0x1aac	; 0x1aac <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	0e 94 56 0d 	call	0x1aac	; 0x1aac <LCD_sendCommand>
}
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	c3 56       	subi	r28, 0x63	; 99
    1aba:	d0 40       	sbci	r29, 0x00	; 0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ed 59       	subi	r30, 0x9D	; 157
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1ace:	ab e3       	ldi	r26, 0x3B	; 59
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	eb e3       	ldi	r30, 0x3B	; 59
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8d 7f       	andi	r24, 0xFD	; 253
    1ada:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1adc:	ab e3       	ldi	r26, 0x3B	; 59
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	eb e3       	ldi	r30, 0x3B	; 59
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8b 7f       	andi	r24, 0xFB	; 251
    1ae8:	8c 93       	st	X, r24
    1aea:	fe 01       	movw	r30, r28
    1aec:	e1 5a       	subi	r30, 0xA1	; 161
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 e8       	ldi	r26, 0x80	; 128
    1af6:	bf e3       	ldi	r27, 0x3F	; 63
    1af8:	80 83       	st	Z, r24
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	a2 83       	std	Z+2, r26	; 0x02
    1afe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	8e 01       	movw	r16, r28
    1b02:	05 5a       	subi	r16, 0xA5	; 165
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	fe 01       	movw	r30, r28
    1b08:	e1 5a       	subi	r30, 0xA1	; 161
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a e7       	ldi	r20, 0x7A	; 122
    1b1a:	55 e4       	ldi	r21, 0x45	; 69
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	f8 01       	movw	r30, r16
    1b26:	80 83       	st	Z, r24
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	a2 83       	std	Z+2, r26	; 0x02
    1b2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e5 5a       	subi	r30, 0xA5	; 165
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	44 f4       	brge	.+16     	; 0x1b5c <LCD_sendCommand+0xb0>
		__ticks = 1;
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e7 5a       	subi	r30, 0xA7	; 167
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	80 83       	st	Z, r24
    1b5a:	64 c0       	rjmp	.+200    	; 0x1c24 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e5 5a       	subi	r30, 0xA5	; 165
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	4f e7       	ldi	r20, 0x7F	; 127
    1b70:	57 e4       	ldi	r21, 0x47	; 71
    1b72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	0c f0       	brlt	.+2      	; 0x1b7c <LCD_sendCommand+0xd0>
    1b7a:	43 c0       	rjmp	.+134    	; 0x1c02 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e1 5a       	subi	r30, 0xA1	; 161
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	8e 01       	movw	r16, r28
    1b9c:	07 5a       	subi	r16, 0xA7	; 167
    1b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	f8 01       	movw	r30, r16
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	80 83       	st	Z, r24
    1bb2:	1f c0       	rjmp	.+62     	; 0x1bf2 <LCD_sendCommand+0x146>
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e9 5a       	subi	r30, 0xA9	; 169
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	80 e9       	ldi	r24, 0x90	; 144
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e9 5a       	subi	r30, 0xA9	; 169
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_sendCommand+0x120>
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e9 5a       	subi	r30, 0xA9	; 169
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bda:	de 01       	movw	r26, r28
    1bdc:	a7 5a       	subi	r26, 0xA7	; 167
    1bde:	bf 4f       	sbci	r27, 0xFF	; 255
    1be0:	fe 01       	movw	r30, r28
    1be2:	e7 5a       	subi	r30, 0xA7	; 167
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	11 96       	adiw	r26, 0x01	; 1
    1bee:	9c 93       	st	X, r25
    1bf0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e7 5a       	subi	r30, 0xA7	; 167
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	d1 f6       	brne	.-76     	; 0x1bb4 <LCD_sendCommand+0x108>
    1c00:	27 c0       	rjmp	.+78     	; 0x1c50 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c02:	8e 01       	movw	r16, r28
    1c04:	07 5a       	subi	r16, 0xA7	; 167
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e5 5a       	subi	r30, 0xA5	; 165
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	f8 01       	movw	r30, r16
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	80 83       	st	Z, r24
    1c24:	de 01       	movw	r26, r28
    1c26:	ab 5a       	subi	r26, 0xAB	; 171
    1c28:	bf 4f       	sbci	r27, 0xFF	; 255
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e7 5a       	subi	r30, 0xA7	; 167
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	8d 93       	st	X+, r24
    1c36:	9c 93       	st	X, r25
    1c38:	fe 01       	movw	r30, r28
    1c3a:	eb 5a       	subi	r30, 0xAB	; 171
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <LCD_sendCommand+0x196>
    1c46:	fe 01       	movw	r30, r28
    1c48:	eb 5a       	subi	r30, 0xAB	; 171
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1c50:	ab e3       	ldi	r26, 0x3B	; 59
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	eb e3       	ldi	r30, 0x3B	; 59
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	88 60       	ori	r24, 0x08	; 8
    1c5c:	8c 93       	st	X, r24
    1c5e:	fe 01       	movw	r30, r28
    1c60:	ef 5a       	subi	r30, 0xAF	; 175
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 e8       	ldi	r26, 0x80	; 128
    1c6a:	bf e3       	ldi	r27, 0x3F	; 63
    1c6c:	80 83       	st	Z, r24
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	a2 83       	std	Z+2, r26	; 0x02
    1c72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	8e 01       	movw	r16, r28
    1c76:	03 5b       	subi	r16, 0xB3	; 179
    1c78:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	ef 5a       	subi	r30, 0xAF	; 175
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	4a e7       	ldi	r20, 0x7A	; 122
    1c8e:	55 e4       	ldi	r21, 0x45	; 69
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	f8 01       	movw	r30, r16
    1c9a:	80 83       	st	Z, r24
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	a2 83       	std	Z+2, r26	; 0x02
    1ca0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e3 5b       	subi	r30, 0xB3	; 179
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	60 81       	ld	r22, Z
    1caa:	71 81       	ldd	r23, Z+1	; 0x01
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	93 81       	ldd	r25, Z+3	; 0x03
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	44 f4       	brge	.+16     	; 0x1cd0 <LCD_sendCommand+0x224>
		__ticks = 1;
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e5 5b       	subi	r30, 0xB5	; 181
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	80 83       	st	Z, r24
    1cce:	64 c0       	rjmp	.+200    	; 0x1d98 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e3 5b       	subi	r30, 0xB3	; 179
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	3f ef       	ldi	r19, 0xFF	; 255
    1ce2:	4f e7       	ldi	r20, 0x7F	; 127
    1ce4:	57 e4       	ldi	r21, 0x47	; 71
    1ce6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cea:	18 16       	cp	r1, r24
    1cec:	0c f0       	brlt	.+2      	; 0x1cf0 <LCD_sendCommand+0x244>
    1cee:	43 c0       	rjmp	.+134    	; 0x1d76 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	ef 5a       	subi	r30, 0xAF	; 175
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	60 81       	ld	r22, Z
    1cf8:	71 81       	ldd	r23, Z+1	; 0x01
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8e 01       	movw	r16, r28
    1d10:	05 5b       	subi	r16, 0xB5	; 181
    1d12:	1f 4f       	sbci	r17, 0xFF	; 255
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	f8 01       	movw	r30, r16
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	80 83       	st	Z, r24
    1d26:	1f c0       	rjmp	.+62     	; 0x1d66 <LCD_sendCommand+0x2ba>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e7 5b       	subi	r30, 0xB7	; 183
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 e9       	ldi	r24, 0x90	; 144
    1d30:	91 e0       	ldi	r25, 0x01	; 1
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	fe 01       	movw	r30, r28
    1d38:	e7 5b       	subi	r30, 0xB7	; 183
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_sendCommand+0x294>
    1d44:	fe 01       	movw	r30, r28
    1d46:	e7 5b       	subi	r30, 0xB7	; 183
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4e:	de 01       	movw	r26, r28
    1d50:	a5 5b       	subi	r26, 0xB5	; 181
    1d52:	bf 4f       	sbci	r27, 0xFF	; 255
    1d54:	fe 01       	movw	r30, r28
    1d56:	e5 5b       	subi	r30, 0xB5	; 181
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	11 96       	adiw	r26, 0x01	; 1
    1d62:	9c 93       	st	X, r25
    1d64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	fe 01       	movw	r30, r28
    1d68:	e5 5b       	subi	r30, 0xB5	; 181
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	d1 f6       	brne	.-76     	; 0x1d28 <LCD_sendCommand+0x27c>
    1d74:	27 c0       	rjmp	.+78     	; 0x1dc4 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d76:	8e 01       	movw	r16, r28
    1d78:	05 5b       	subi	r16, 0xB5	; 181
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e3 5b       	subi	r30, 0xB3	; 179
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	f8 01       	movw	r30, r16
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	de 01       	movw	r26, r28
    1d9a:	a9 5b       	subi	r26, 0xB9	; 185
    1d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e5 5b       	subi	r30, 0xB5	; 181
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	8d 93       	st	X+, r24
    1daa:	9c 93       	st	X, r25
    1dac:	fe 01       	movw	r30, r28
    1dae:	e9 5b       	subi	r30, 0xB9	; 185
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	91 81       	ldd	r25, Z+1	; 0x01
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_sendCommand+0x30a>
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e9 5b       	subi	r30, 0xB9	; 185
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	91 83       	std	Z+1, r25	; 0x01
    1dc2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1dc4:	ab e3       	ldi	r26, 0x3B	; 59
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	eb e3       	ldi	r30, 0x3B	; 59
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	98 2f       	mov	r25, r24
    1dd0:	9f 70       	andi	r25, 0x0F	; 15
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ed 59       	subi	r30, 0x9D	; 157
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	80 7f       	andi	r24, 0xF0	; 240
    1ddc:	89 2b       	or	r24, r25
    1dde:	8c 93       	st	X, r24
    1de0:	fe 01       	movw	r30, r28
    1de2:	ed 5b       	subi	r30, 0xBD	; 189
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e8       	ldi	r26, 0x80	; 128
    1dec:	bf e3       	ldi	r27, 0x3F	; 63
    1dee:	80 83       	st	Z, r24
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	a2 83       	std	Z+2, r26	; 0x02
    1df4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	8e 01       	movw	r16, r28
    1df8:	01 5c       	subi	r16, 0xC1	; 193
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	ed 5b       	subi	r30, 0xBD	; 189
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a e7       	ldi	r20, 0x7A	; 122
    1e10:	55 e4       	ldi	r21, 0x45	; 69
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	80 83       	st	Z, r24
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	a2 83       	std	Z+2, r26	; 0x02
    1e22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e24:	fe 01       	movw	r30, r28
    1e26:	ff 96       	adiw	r30, 0x3f	; 63
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <LCD_sendCommand+0x39e>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9e af       	std	Y+62, r25	; 0x3e
    1e46:	8d af       	std	Y+61, r24	; 0x3d
    1e48:	46 c0       	rjmp	.+140    	; 0x1ed6 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ff 96       	adiw	r30, 0x3f	; 63
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	57 e4       	ldi	r21, 0x47	; 71
    1e5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e62:	18 16       	cp	r1, r24
    1e64:	64 f5       	brge	.+88     	; 0x1ebe <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	fe 01       	movw	r30, r28
    1e68:	ed 5b       	subi	r30, 0xBD	; 189
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9e af       	std	Y+62, r25	; 0x3e
    1e92:	8d af       	std	Y+61, r24	; 0x3d
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <LCD_sendCommand+0x408>
    1e96:	80 e9       	ldi	r24, 0x90	; 144
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	9c af       	std	Y+60, r25	; 0x3c
    1e9c:	8b af       	std	Y+59, r24	; 0x3b
    1e9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ea0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_sendCommand+0x3f6>
    1ea6:	9c af       	std	Y+60, r25	; 0x3c
    1ea8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eaa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	9e af       	std	Y+62, r25	; 0x3e
    1eb2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	69 f7       	brne	.-38     	; 0x1e96 <LCD_sendCommand+0x3ea>
    1ebc:	16 c0       	rjmp	.+44     	; 0x1eea <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ff 96       	adiw	r30, 0x3f	; 63
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9e af       	std	Y+62, r25	; 0x3e
    1ed4:	8d af       	std	Y+61, r24	; 0x3d
    1ed6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ed8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eda:	9a af       	std	Y+58, r25	; 0x3a
    1edc:	89 af       	std	Y+57, r24	; 0x39
    1ede:	89 ad       	ldd	r24, Y+57	; 0x39
    1ee0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_sendCommand+0x436>
    1ee6:	9a af       	std	Y+58, r25	; 0x3a
    1ee8:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1eea:	ab e3       	ldi	r26, 0x3B	; 59
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e3       	ldi	r30, 0x3B	; 59
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	87 7f       	andi	r24, 0xF7	; 247
    1ef6:	8c 93       	st	X, r24
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e8       	ldi	r26, 0x80	; 128
    1efe:	bf e3       	ldi	r27, 0x3F	; 63
    1f00:	8d ab       	std	Y+53, r24	; 0x35
    1f02:	9e ab       	std	Y+54, r25	; 0x36
    1f04:	af ab       	std	Y+55, r26	; 0x37
    1f06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	6d a9       	ldd	r22, Y+53	; 0x35
    1f0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a e7       	ldi	r20, 0x7A	; 122
    1f16:	55 e4       	ldi	r21, 0x45	; 69
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	89 ab       	std	Y+49, r24	; 0x31
    1f22:	9a ab       	std	Y+50, r25	; 0x32
    1f24:	ab ab       	std	Y+51, r26	; 0x33
    1f26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f28:	69 a9       	ldd	r22, Y+49	; 0x31
    1f2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <LCD_sendCommand+0x49e>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	98 ab       	std	Y+48, r25	; 0x30
    1f46:	8f a7       	std	Y+47, r24	; 0x2f
    1f48:	3f c0       	rjmp	.+126    	; 0x1fc8 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1f4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f50:	9c a9       	ldd	r25, Y+52	; 0x34
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	6d a9       	ldd	r22, Y+53	; 0x35
    1f64:	7e a9       	ldd	r23, Y+54	; 0x36
    1f66:	8f a9       	ldd	r24, Y+55	; 0x37
    1f68:	98 ad       	ldd	r25, Y+56	; 0x38
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	98 ab       	std	Y+48, r25	; 0x30
    1f88:	8f a7       	std	Y+47, r24	; 0x2f
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <LCD_sendCommand+0x4fe>
    1f8c:	80 e9       	ldi	r24, 0x90	; 144
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	9e a7       	std	Y+46, r25	; 0x2e
    1f92:	8d a7       	std	Y+45, r24	; 0x2d
    1f94:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f96:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_sendCommand+0x4ec>
    1f9c:	9e a7       	std	Y+46, r25	; 0x2e
    1f9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	98 ab       	std	Y+48, r25	; 0x30
    1fa8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fac:	98 a9       	ldd	r25, Y+48	; 0x30
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <LCD_sendCommand+0x4e0>
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fba:	9c a9       	ldd	r25, Y+52	; 0x34
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	98 ab       	std	Y+48, r25	; 0x30
    1fc6:	8f a7       	std	Y+47, r24	; 0x2f
    1fc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fca:	98 a9       	ldd	r25, Y+48	; 0x30
    1fcc:	9c a7       	std	Y+44, r25	; 0x2c
    1fce:	8b a7       	std	Y+43, r24	; 0x2b
    1fd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <LCD_sendCommand+0x528>
    1fd8:	9c a7       	std	Y+44, r25	; 0x2c
    1fda:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1fdc:	ab e3       	ldi	r26, 0x3B	; 59
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	eb e3       	ldi	r30, 0x3B	; 59
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	88 60       	ori	r24, 0x08	; 8
    1fe8:	8c 93       	st	X, r24
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e8       	ldi	r26, 0x80	; 128
    1ff0:	bf e3       	ldi	r27, 0x3F	; 63
    1ff2:	8f a3       	std	Y+39, r24	; 0x27
    1ff4:	98 a7       	std	Y+40, r25	; 0x28
    1ff6:	a9 a7       	std	Y+41, r26	; 0x29
    1ff8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	6f a1       	ldd	r22, Y+39	; 0x27
    1ffc:	78 a5       	ldd	r23, Y+40	; 0x28
    1ffe:	89 a5       	ldd	r24, Y+41	; 0x29
    2000:	9a a5       	ldd	r25, Y+42	; 0x2a
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a e7       	ldi	r20, 0x7A	; 122
    2008:	55 e4       	ldi	r21, 0x45	; 69
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8b a3       	std	Y+35, r24	; 0x23
    2014:	9c a3       	std	Y+36, r25	; 0x24
    2016:	ad a3       	std	Y+37, r26	; 0x25
    2018:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    201a:	6b a1       	ldd	r22, Y+35	; 0x23
    201c:	7c a1       	ldd	r23, Y+36	; 0x24
    201e:	8d a1       	ldd	r24, Y+37	; 0x25
    2020:	9e a1       	ldd	r25, Y+38	; 0x26
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <LCD_sendCommand+0x590>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9a a3       	std	Y+34, r25	; 0x22
    2038:	89 a3       	std	Y+33, r24	; 0x21
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    203c:	6b a1       	ldd	r22, Y+35	; 0x23
    203e:	7c a1       	ldd	r23, Y+36	; 0x24
    2040:	8d a1       	ldd	r24, Y+37	; 0x25
    2042:	9e a1       	ldd	r25, Y+38	; 0x26
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	6f a1       	ldd	r22, Y+39	; 0x27
    2056:	78 a5       	ldd	r23, Y+40	; 0x28
    2058:	89 a5       	ldd	r24, Y+41	; 0x29
    205a:	9a a5       	ldd	r25, Y+42	; 0x2a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9a a3       	std	Y+34, r25	; 0x22
    207a:	89 a3       	std	Y+33, r24	; 0x21
    207c:	0f c0       	rjmp	.+30     	; 0x209c <LCD_sendCommand+0x5f0>
    207e:	80 e9       	ldi	r24, 0x90	; 144
    2080:	91 e0       	ldi	r25, 0x01	; 1
    2082:	98 a3       	std	Y+32, r25	; 0x20
    2084:	8f 8f       	std	Y+31, r24	; 0x1f
    2086:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2088:	98 a1       	ldd	r25, Y+32	; 0x20
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_sendCommand+0x5de>
    208e:	98 a3       	std	Y+32, r25	; 0x20
    2090:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	89 a1       	ldd	r24, Y+33	; 0x21
    2094:	9a a1       	ldd	r25, Y+34	; 0x22
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9a a3       	std	Y+34, r25	; 0x22
    209a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	89 a1       	ldd	r24, Y+33	; 0x21
    209e:	9a a1       	ldd	r25, Y+34	; 0x22
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <LCD_sendCommand+0x5d2>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6b a1       	ldd	r22, Y+35	; 0x23
    20a8:	7c a1       	ldd	r23, Y+36	; 0x24
    20aa:	8d a1       	ldd	r24, Y+37	; 0x25
    20ac:	9e a1       	ldd	r25, Y+38	; 0x26
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9a a3       	std	Y+34, r25	; 0x22
    20b8:	89 a3       	std	Y+33, r24	; 0x21
    20ba:	89 a1       	ldd	r24, Y+33	; 0x21
    20bc:	9a a1       	ldd	r25, Y+34	; 0x22
    20be:	9e 8f       	std	Y+30, r25	; 0x1e
    20c0:	8d 8f       	std	Y+29, r24	; 0x1d
    20c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_sendCommand+0x61a>
    20ca:	9e 8f       	std	Y+30, r25	; 0x1e
    20cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    20ce:	ab e3       	ldi	r26, 0x3B	; 59
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	eb e3       	ldi	r30, 0x3B	; 59
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	28 2f       	mov	r18, r24
    20da:	2f 70       	andi	r18, 0x0F	; 15
    20dc:	fe 01       	movw	r30, r28
    20de:	ed 59       	subi	r30, 0x9D	; 157
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 81       	ld	r24, Z
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	82 95       	swap	r24
    20ea:	92 95       	swap	r25
    20ec:	90 7f       	andi	r25, 0xF0	; 240
    20ee:	98 27       	eor	r25, r24
    20f0:	80 7f       	andi	r24, 0xF0	; 240
    20f2:	98 27       	eor	r25, r24
    20f4:	82 2b       	or	r24, r18
    20f6:	8c 93       	st	X, r24
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a0 e8       	ldi	r26, 0x80	; 128
    20fe:	bf e3       	ldi	r27, 0x3F	; 63
    2100:	89 8f       	std	Y+25, r24	; 0x19
    2102:	9a 8f       	std	Y+26, r25	; 0x1a
    2104:	ab 8f       	std	Y+27, r26	; 0x1b
    2106:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	69 8d       	ldd	r22, Y+25	; 0x19
    210a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a e7       	ldi	r20, 0x7A	; 122
    2116:	55 e4       	ldi	r21, 0x45	; 69
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8d 8b       	std	Y+21, r24	; 0x15
    2122:	9e 8b       	std	Y+22, r25	; 0x16
    2124:	af 8b       	std	Y+23, r26	; 0x17
    2126:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2128:	6d 89       	ldd	r22, Y+21	; 0x15
    212a:	7e 89       	ldd	r23, Y+22	; 0x16
    212c:	8f 89       	ldd	r24, Y+23	; 0x17
    212e:	98 8d       	ldd	r25, Y+24	; 0x18
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <LCD_sendCommand+0x69e>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9c 8b       	std	Y+20, r25	; 0x14
    2146:	8b 8b       	std	Y+19, r24	; 0x13
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    214a:	6d 89       	ldd	r22, Y+21	; 0x15
    214c:	7e 89       	ldd	r23, Y+22	; 0x16
    214e:	8f 89       	ldd	r24, Y+23	; 0x17
    2150:	98 8d       	ldd	r25, Y+24	; 0x18
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	69 8d       	ldd	r22, Y+25	; 0x19
    2164:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2168:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <LCD_sendCommand+0x6fe>
    218c:	80 e9       	ldi	r24, 0x90	; 144
    218e:	91 e0       	ldi	r25, 0x01	; 1
    2190:	9a 8b       	std	Y+18, r25	; 0x12
    2192:	89 8b       	std	Y+17, r24	; 0x11
    2194:	89 89       	ldd	r24, Y+17	; 0x11
    2196:	9a 89       	ldd	r25, Y+18	; 0x12
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_sendCommand+0x6ec>
    219c:	9a 8b       	std	Y+18, r25	; 0x12
    219e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	8b 89       	ldd	r24, Y+19	; 0x13
    21ac:	9c 89       	ldd	r25, Y+20	; 0x14
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <LCD_sendCommand+0x6e0>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	6d 89       	ldd	r22, Y+21	; 0x15
    21b6:	7e 89       	ldd	r23, Y+22	; 0x16
    21b8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ba:	98 8d       	ldd	r25, Y+24	; 0x18
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9c 8b       	std	Y+20, r25	; 0x14
    21c6:	8b 8b       	std	Y+19, r24	; 0x13
    21c8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ca:	9c 89       	ldd	r25, Y+20	; 0x14
    21cc:	98 8b       	std	Y+16, r25	; 0x10
    21ce:	8f 87       	std	Y+15, r24	; 0x0f
    21d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d2:	98 89       	ldd	r25, Y+16	; 0x10
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_sendCommand+0x728>
    21d8:	98 8b       	std	Y+16, r25	; 0x10
    21da:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    21dc:	ab e3       	ldi	r26, 0x3B	; 59
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	eb e3       	ldi	r30, 0x3B	; 59
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	87 7f       	andi	r24, 0xF7	; 247
    21e8:	8c 93       	st	X, r24
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	a0 e8       	ldi	r26, 0x80	; 128
    21f0:	bf e3       	ldi	r27, 0x3F	; 63
    21f2:	8b 87       	std	Y+11, r24	; 0x0b
    21f4:	9c 87       	std	Y+12, r25	; 0x0c
    21f6:	ad 87       	std	Y+13, r26	; 0x0d
    21f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2200:	9e 85       	ldd	r25, Y+14	; 0x0e
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	4a e7       	ldi	r20, 0x7A	; 122
    2208:	55 e4       	ldi	r21, 0x45	; 69
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	8f 83       	std	Y+7, r24	; 0x07
    2214:	98 87       	std	Y+8, r25	; 0x08
    2216:	a9 87       	std	Y+9, r26	; 0x09
    2218:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    221a:	6f 81       	ldd	r22, Y+7	; 0x07
    221c:	78 85       	ldd	r23, Y+8	; 0x08
    221e:	89 85       	ldd	r24, Y+9	; 0x09
    2220:	9a 85       	ldd	r25, Y+10	; 0x0a
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e8       	ldi	r20, 0x80	; 128
    2228:	5f e3       	ldi	r21, 0x3F	; 63
    222a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222e:	88 23       	and	r24, r24
    2230:	2c f4       	brge	.+10     	; 0x223c <LCD_sendCommand+0x790>
		__ticks = 1;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
    223a:	3f c0       	rjmp	.+126    	; 0x22ba <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    223c:	6f 81       	ldd	r22, Y+7	; 0x07
    223e:	78 85       	ldd	r23, Y+8	; 0x08
    2240:	89 85       	ldd	r24, Y+9	; 0x09
    2242:	9a 85       	ldd	r25, Y+10	; 0x0a
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	3f ef       	ldi	r19, 0xFF	; 255
    2248:	4f e7       	ldi	r20, 0x7F	; 127
    224a:	57 e4       	ldi	r21, 0x47	; 71
    224c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2250:	18 16       	cp	r1, r24
    2252:	4c f5       	brge	.+82     	; 0x22a6 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2254:	6b 85       	ldd	r22, Y+11	; 0x0b
    2256:	7c 85       	ldd	r23, Y+12	; 0x0c
    2258:	8d 85       	ldd	r24, Y+13	; 0x0d
    225a:	9e 85       	ldd	r25, Y+14	; 0x0e
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e2       	ldi	r20, 0x20	; 32
    2262:	51 e4       	ldi	r21, 0x41	; 65
    2264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	bc 01       	movw	r22, r24
    226e:	cd 01       	movw	r24, r26
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	0f c0       	rjmp	.+30     	; 0x229c <LCD_sendCommand+0x7f0>
    227e:	80 e9       	ldi	r24, 0x90	; 144
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	9c 83       	std	Y+4, r25	; 0x04
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	9c 81       	ldd	r25, Y+4	; 0x04
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	f1 f7       	brne	.-4      	; 0x228a <LCD_sendCommand+0x7de>
    228e:	9c 83       	std	Y+4, r25	; 0x04
    2290:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	9e 83       	std	Y+6, r25	; 0x06
    229a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	69 f7       	brne	.-38     	; 0x227e <LCD_sendCommand+0x7d2>
    22a4:	14 c0       	rjmp	.+40     	; 0x22ce <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a6:	6f 81       	ldd	r22, Y+7	; 0x07
    22a8:	78 85       	ldd	r23, Y+8	; 0x08
    22aa:	89 85       	ldd	r24, Y+9	; 0x09
    22ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9e 83       	std	Y+6, r25	; 0x06
    22b8:	8d 83       	std	Y+5, r24	; 0x05
    22ba:	8d 81       	ldd	r24, Y+5	; 0x05
    22bc:	9e 81       	ldd	r25, Y+6	; 0x06
    22be:	9a 83       	std	Y+2, r25	; 0x02
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <LCD_sendCommand+0x81a>
    22ca:	9a 83       	std	Y+2, r25	; 0x02
    22cc:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    22ce:	cd 59       	subi	r28, 0x9D	; 157
    22d0:	df 4f       	sbci	r29, 0xFF	; 255
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	08 95       	ret

000022e6 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	c3 56       	subi	r28, 0x63	; 99
    22f4:	d0 40       	sbci	r29, 0x00	; 0
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	fe 01       	movw	r30, r28
    2302:	ed 59       	subi	r30, 0x9D	; 157
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2308:	ab e3       	ldi	r26, 0x3B	; 59
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	eb e3       	ldi	r30, 0x3B	; 59
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	82 60       	ori	r24, 0x02	; 2
    2314:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2316:	ab e3       	ldi	r26, 0x3B	; 59
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	eb e3       	ldi	r30, 0x3B	; 59
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8b 7f       	andi	r24, 0xFB	; 251
    2322:	8c 93       	st	X, r24
    2324:	fe 01       	movw	r30, r28
    2326:	e1 5a       	subi	r30, 0xA1	; 161
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	a0 e8       	ldi	r26, 0x80	; 128
    2330:	bf e3       	ldi	r27, 0x3F	; 63
    2332:	80 83       	st	Z, r24
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	a2 83       	std	Z+2, r26	; 0x02
    2338:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233a:	8e 01       	movw	r16, r28
    233c:	05 5a       	subi	r16, 0xA5	; 165
    233e:	1f 4f       	sbci	r17, 0xFF	; 255
    2340:	fe 01       	movw	r30, r28
    2342:	e1 5a       	subi	r30, 0xA1	; 161
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	60 81       	ld	r22, Z
    2348:	71 81       	ldd	r23, Z+1	; 0x01
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	4a e7       	ldi	r20, 0x7A	; 122
    2354:	55 e4       	ldi	r21, 0x45	; 69
    2356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	f8 01       	movw	r30, r16
    2360:	80 83       	st	Z, r24
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	a2 83       	std	Z+2, r26	; 0x02
    2366:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2368:	fe 01       	movw	r30, r28
    236a:	e5 5a       	subi	r30, 0xA5	; 165
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2382:	88 23       	and	r24, r24
    2384:	44 f4       	brge	.+16     	; 0x2396 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2386:	fe 01       	movw	r30, r28
    2388:	e7 5a       	subi	r30, 0xA7	; 167
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	80 83       	st	Z, r24
    2394:	64 c0       	rjmp	.+200    	; 0x245e <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2396:	fe 01       	movw	r30, r28
    2398:	e5 5a       	subi	r30, 0xA5	; 165
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	60 81       	ld	r22, Z
    239e:	71 81       	ldd	r23, Z+1	; 0x01
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	0c f0       	brlt	.+2      	; 0x23b6 <LCD_displayCharacter+0xd0>
    23b4:	43 c0       	rjmp	.+134    	; 0x243c <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b6:	fe 01       	movw	r30, r28
    23b8:	e1 5a       	subi	r30, 0xA1	; 161
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	8e 01       	movw	r16, r28
    23d6:	07 5a       	subi	r16, 0xA7	; 167
    23d8:	1f 4f       	sbci	r17, 0xFF	; 255
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	f8 01       	movw	r30, r16
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
    23ec:	1f c0       	rjmp	.+62     	; 0x242c <LCD_displayCharacter+0x146>
    23ee:	fe 01       	movw	r30, r28
    23f0:	e9 5a       	subi	r30, 0xA9	; 169
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 e9       	ldi	r24, 0x90	; 144
    23f6:	91 e0       	ldi	r25, 0x01	; 1
    23f8:	91 83       	std	Z+1, r25	; 0x01
    23fa:	80 83       	st	Z, r24
    23fc:	fe 01       	movw	r30, r28
    23fe:	e9 5a       	subi	r30, 0xA9	; 169
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 81       	ld	r24, Z
    2404:	91 81       	ldd	r25, Z+1	; 0x01
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <LCD_displayCharacter+0x120>
    240a:	fe 01       	movw	r30, r28
    240c:	e9 5a       	subi	r30, 0xA9	; 169
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	91 83       	std	Z+1, r25	; 0x01
    2412:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2414:	de 01       	movw	r26, r28
    2416:	a7 5a       	subi	r26, 0xA7	; 167
    2418:	bf 4f       	sbci	r27, 0xFF	; 255
    241a:	fe 01       	movw	r30, r28
    241c:	e7 5a       	subi	r30, 0xA7	; 167
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	91 81       	ldd	r25, Z+1	; 0x01
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	11 96       	adiw	r26, 0x01	; 1
    2428:	9c 93       	st	X, r25
    242a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	fe 01       	movw	r30, r28
    242e:	e7 5a       	subi	r30, 0xA7	; 167
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	d1 f6       	brne	.-76     	; 0x23ee <LCD_displayCharacter+0x108>
    243a:	27 c0       	rjmp	.+78     	; 0x248a <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243c:	8e 01       	movw	r16, r28
    243e:	07 5a       	subi	r16, 0xA7	; 167
    2440:	1f 4f       	sbci	r17, 0xFF	; 255
    2442:	fe 01       	movw	r30, r28
    2444:	e5 5a       	subi	r30, 0xA5	; 165
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	f8 01       	movw	r30, r16
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
    245e:	de 01       	movw	r26, r28
    2460:	ab 5a       	subi	r26, 0xAB	; 171
    2462:	bf 4f       	sbci	r27, 0xFF	; 255
    2464:	fe 01       	movw	r30, r28
    2466:	e7 5a       	subi	r30, 0xA7	; 167
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	91 81       	ldd	r25, Z+1	; 0x01
    246e:	8d 93       	st	X+, r24
    2470:	9c 93       	st	X, r25
    2472:	fe 01       	movw	r30, r28
    2474:	eb 5a       	subi	r30, 0xAB	; 171
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_displayCharacter+0x196>
    2480:	fe 01       	movw	r30, r28
    2482:	eb 5a       	subi	r30, 0xAB	; 171
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    248a:	ab e3       	ldi	r26, 0x3B	; 59
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	eb e3       	ldi	r30, 0x3B	; 59
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	88 60       	ori	r24, 0x08	; 8
    2496:	8c 93       	st	X, r24
    2498:	fe 01       	movw	r30, r28
    249a:	ef 5a       	subi	r30, 0xAF	; 175
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a0 e8       	ldi	r26, 0x80	; 128
    24a4:	bf e3       	ldi	r27, 0x3F	; 63
    24a6:	80 83       	st	Z, r24
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	a2 83       	std	Z+2, r26	; 0x02
    24ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	8e 01       	movw	r16, r28
    24b0:	03 5b       	subi	r16, 0xB3	; 179
    24b2:	1f 4f       	sbci	r17, 0xFF	; 255
    24b4:	fe 01       	movw	r30, r28
    24b6:	ef 5a       	subi	r30, 0xAF	; 175
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	60 81       	ld	r22, Z
    24bc:	71 81       	ldd	r23, Z+1	; 0x01
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	93 81       	ldd	r25, Z+3	; 0x03
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a e7       	ldi	r20, 0x7A	; 122
    24c8:	55 e4       	ldi	r21, 0x45	; 69
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	f8 01       	movw	r30, r16
    24d4:	80 83       	st	Z, r24
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	a2 83       	std	Z+2, r26	; 0x02
    24da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24dc:	fe 01       	movw	r30, r28
    24de:	e3 5b       	subi	r30, 0xB3	; 179
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e8       	ldi	r20, 0x80	; 128
    24f0:	5f e3       	ldi	r21, 0x3F	; 63
    24f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f6:	88 23       	and	r24, r24
    24f8:	44 f4       	brge	.+16     	; 0x250a <LCD_displayCharacter+0x224>
		__ticks = 1;
    24fa:	fe 01       	movw	r30, r28
    24fc:	e5 5b       	subi	r30, 0xB5	; 181
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	80 83       	st	Z, r24
    2508:	64 c0       	rjmp	.+200    	; 0x25d2 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    250a:	fe 01       	movw	r30, r28
    250c:	e3 5b       	subi	r30, 0xB3	; 179
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	0c f0       	brlt	.+2      	; 0x252a <LCD_displayCharacter+0x244>
    2528:	43 c0       	rjmp	.+134    	; 0x25b0 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	fe 01       	movw	r30, r28
    252c:	ef 5a       	subi	r30, 0xAF	; 175
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	8e 01       	movw	r16, r28
    254a:	05 5b       	subi	r16, 0xB5	; 181
    254c:	1f 4f       	sbci	r17, 0xFF	; 255
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	f8 01       	movw	r30, r16
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	80 83       	st	Z, r24
    2560:	1f c0       	rjmp	.+62     	; 0x25a0 <LCD_displayCharacter+0x2ba>
    2562:	fe 01       	movw	r30, r28
    2564:	e7 5b       	subi	r30, 0xB7	; 183
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 e9       	ldi	r24, 0x90	; 144
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	80 83       	st	Z, r24
    2570:	fe 01       	movw	r30, r28
    2572:	e7 5b       	subi	r30, 0xB7	; 183
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_displayCharacter+0x294>
    257e:	fe 01       	movw	r30, r28
    2580:	e7 5b       	subi	r30, 0xB7	; 183
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2588:	de 01       	movw	r26, r28
    258a:	a5 5b       	subi	r26, 0xB5	; 181
    258c:	bf 4f       	sbci	r27, 0xFF	; 255
    258e:	fe 01       	movw	r30, r28
    2590:	e5 5b       	subi	r30, 0xB5	; 181
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	11 96       	adiw	r26, 0x01	; 1
    259c:	9c 93       	st	X, r25
    259e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a0:	fe 01       	movw	r30, r28
    25a2:	e5 5b       	subi	r30, 0xB5	; 181
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	d1 f6       	brne	.-76     	; 0x2562 <LCD_displayCharacter+0x27c>
    25ae:	27 c0       	rjmp	.+78     	; 0x25fe <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	8e 01       	movw	r16, r28
    25b2:	05 5b       	subi	r16, 0xB5	; 181
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	fe 01       	movw	r30, r28
    25b8:	e3 5b       	subi	r30, 0xB3	; 179
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	f8 01       	movw	r30, r16
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	80 83       	st	Z, r24
    25d2:	de 01       	movw	r26, r28
    25d4:	a9 5b       	subi	r26, 0xB9	; 185
    25d6:	bf 4f       	sbci	r27, 0xFF	; 255
    25d8:	fe 01       	movw	r30, r28
    25da:	e5 5b       	subi	r30, 0xB5	; 181
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	8d 93       	st	X+, r24
    25e4:	9c 93       	st	X, r25
    25e6:	fe 01       	movw	r30, r28
    25e8:	e9 5b       	subi	r30, 0xB9	; 185
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	80 81       	ld	r24, Z
    25ee:	91 81       	ldd	r25, Z+1	; 0x01
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <LCD_displayCharacter+0x30a>
    25f4:	fe 01       	movw	r30, r28
    25f6:	e9 5b       	subi	r30, 0xB9	; 185
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    25fe:	ab e3       	ldi	r26, 0x3B	; 59
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	eb e3       	ldi	r30, 0x3B	; 59
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	98 2f       	mov	r25, r24
    260a:	9f 70       	andi	r25, 0x0F	; 15
    260c:	fe 01       	movw	r30, r28
    260e:	ed 59       	subi	r30, 0x9D	; 157
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	80 81       	ld	r24, Z
    2614:	80 7f       	andi	r24, 0xF0	; 240
    2616:	89 2b       	or	r24, r25
    2618:	8c 93       	st	X, r24
    261a:	fe 01       	movw	r30, r28
    261c:	ed 5b       	subi	r30, 0xBD	; 189
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	a0 e8       	ldi	r26, 0x80	; 128
    2626:	bf e3       	ldi	r27, 0x3F	; 63
    2628:	80 83       	st	Z, r24
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	a2 83       	std	Z+2, r26	; 0x02
    262e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2630:	8e 01       	movw	r16, r28
    2632:	01 5c       	subi	r16, 0xC1	; 193
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
    2636:	fe 01       	movw	r30, r28
    2638:	ed 5b       	subi	r30, 0xBD	; 189
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	4a e7       	ldi	r20, 0x7A	; 122
    264a:	55 e4       	ldi	r21, 0x45	; 69
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	f8 01       	movw	r30, r16
    2656:	80 83       	st	Z, r24
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	a2 83       	std	Z+2, r26	; 0x02
    265c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    265e:	fe 01       	movw	r30, r28
    2660:	ff 96       	adiw	r30, 0x3f	; 63
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e8       	ldi	r20, 0x80	; 128
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2676:	88 23       	and	r24, r24
    2678:	2c f4       	brge	.+10     	; 0x2684 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9e af       	std	Y+62, r25	; 0x3e
    2680:	8d af       	std	Y+61, r24	; 0x3d
    2682:	46 c0       	rjmp	.+140    	; 0x2710 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    2684:	fe 01       	movw	r30, r28
    2686:	ff 96       	adiw	r30, 0x3f	; 63
    2688:	60 81       	ld	r22, Z
    268a:	71 81       	ldd	r23, Z+1	; 0x01
    268c:	82 81       	ldd	r24, Z+2	; 0x02
    268e:	93 81       	ldd	r25, Z+3	; 0x03
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	3f ef       	ldi	r19, 0xFF	; 255
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	57 e4       	ldi	r21, 0x47	; 71
    2698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    269c:	18 16       	cp	r1, r24
    269e:	64 f5       	brge	.+88     	; 0x26f8 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	fe 01       	movw	r30, r28
    26a2:	ed 5b       	subi	r30, 0xBD	; 189
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	60 81       	ld	r22, Z
    26a8:	71 81       	ldd	r23, Z+1	; 0x01
    26aa:	82 81       	ldd	r24, Z+2	; 0x02
    26ac:	93 81       	ldd	r25, Z+3	; 0x03
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e2       	ldi	r20, 0x20	; 32
    26b4:	51 e4       	ldi	r21, 0x41	; 65
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9e af       	std	Y+62, r25	; 0x3e
    26cc:	8d af       	std	Y+61, r24	; 0x3d
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <LCD_displayCharacter+0x408>
    26d0:	80 e9       	ldi	r24, 0x90	; 144
    26d2:	91 e0       	ldi	r25, 0x01	; 1
    26d4:	9c af       	std	Y+60, r25	; 0x3c
    26d6:	8b af       	std	Y+59, r24	; 0x3b
    26d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    26da:	9c ad       	ldd	r25, Y+60	; 0x3c
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_displayCharacter+0x3f6>
    26e0:	9c af       	std	Y+60, r25	; 0x3c
    26e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    26e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	9e af       	std	Y+62, r25	; 0x3e
    26ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    26f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	69 f7       	brne	.-38     	; 0x26d0 <LCD_displayCharacter+0x3ea>
    26f6:	16 c0       	rjmp	.+44     	; 0x2724 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	fe 01       	movw	r30, r28
    26fa:	ff 96       	adiw	r30, 0x3f	; 63
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9e af       	std	Y+62, r25	; 0x3e
    270e:	8d af       	std	Y+61, r24	; 0x3d
    2710:	8d ad       	ldd	r24, Y+61	; 0x3d
    2712:	9e ad       	ldd	r25, Y+62	; 0x3e
    2714:	9a af       	std	Y+58, r25	; 0x3a
    2716:	89 af       	std	Y+57, r24	; 0x39
    2718:	89 ad       	ldd	r24, Y+57	; 0x39
    271a:	9a ad       	ldd	r25, Y+58	; 0x3a
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <LCD_displayCharacter+0x436>
    2720:	9a af       	std	Y+58, r25	; 0x3a
    2722:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2724:	ab e3       	ldi	r26, 0x3B	; 59
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	eb e3       	ldi	r30, 0x3B	; 59
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	87 7f       	andi	r24, 0xF7	; 247
    2730:	8c 93       	st	X, r24
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a0 e8       	ldi	r26, 0x80	; 128
    2738:	bf e3       	ldi	r27, 0x3F	; 63
    273a:	8d ab       	std	Y+53, r24	; 0x35
    273c:	9e ab       	std	Y+54, r25	; 0x36
    273e:	af ab       	std	Y+55, r26	; 0x37
    2740:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2742:	6d a9       	ldd	r22, Y+53	; 0x35
    2744:	7e a9       	ldd	r23, Y+54	; 0x36
    2746:	8f a9       	ldd	r24, Y+55	; 0x37
    2748:	98 ad       	ldd	r25, Y+56	; 0x38
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	4a e7       	ldi	r20, 0x7A	; 122
    2750:	55 e4       	ldi	r21, 0x45	; 69
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	89 ab       	std	Y+49, r24	; 0x31
    275c:	9a ab       	std	Y+50, r25	; 0x32
    275e:	ab ab       	std	Y+51, r26	; 0x33
    2760:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2762:	69 a9       	ldd	r22, Y+49	; 0x31
    2764:	7a a9       	ldd	r23, Y+50	; 0x32
    2766:	8b a9       	ldd	r24, Y+51	; 0x33
    2768:	9c a9       	ldd	r25, Y+52	; 0x34
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2776:	88 23       	and	r24, r24
    2778:	2c f4       	brge	.+10     	; 0x2784 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	98 ab       	std	Y+48, r25	; 0x30
    2780:	8f a7       	std	Y+47, r24	; 0x2f
    2782:	3f c0       	rjmp	.+126    	; 0x2802 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    2784:	69 a9       	ldd	r22, Y+49	; 0x31
    2786:	7a a9       	ldd	r23, Y+50	; 0x32
    2788:	8b a9       	ldd	r24, Y+51	; 0x33
    278a:	9c a9       	ldd	r25, Y+52	; 0x34
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	3f ef       	ldi	r19, 0xFF	; 255
    2790:	4f e7       	ldi	r20, 0x7F	; 127
    2792:	57 e4       	ldi	r21, 0x47	; 71
    2794:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2798:	18 16       	cp	r1, r24
    279a:	4c f5       	brge	.+82     	; 0x27ee <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279c:	6d a9       	ldd	r22, Y+53	; 0x35
    279e:	7e a9       	ldd	r23, Y+54	; 0x36
    27a0:	8f a9       	ldd	r24, Y+55	; 0x37
    27a2:	98 ad       	ldd	r25, Y+56	; 0x38
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e2       	ldi	r20, 0x20	; 32
    27aa:	51 e4       	ldi	r21, 0x41	; 65
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	98 ab       	std	Y+48, r25	; 0x30
    27c2:	8f a7       	std	Y+47, r24	; 0x2f
    27c4:	0f c0       	rjmp	.+30     	; 0x27e4 <LCD_displayCharacter+0x4fe>
    27c6:	80 e9       	ldi	r24, 0x90	; 144
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	9e a7       	std	Y+46, r25	; 0x2e
    27cc:	8d a7       	std	Y+45, r24	; 0x2d
    27ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    27d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <LCD_displayCharacter+0x4ec>
    27d6:	9e a7       	std	Y+46, r25	; 0x2e
    27d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27da:	8f a5       	ldd	r24, Y+47	; 0x2f
    27dc:	98 a9       	ldd	r25, Y+48	; 0x30
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	98 ab       	std	Y+48, r25	; 0x30
    27e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e6:	98 a9       	ldd	r25, Y+48	; 0x30
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	69 f7       	brne	.-38     	; 0x27c6 <LCD_displayCharacter+0x4e0>
    27ec:	14 c0       	rjmp	.+40     	; 0x2816 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ee:	69 a9       	ldd	r22, Y+49	; 0x31
    27f0:	7a a9       	ldd	r23, Y+50	; 0x32
    27f2:	8b a9       	ldd	r24, Y+51	; 0x33
    27f4:	9c a9       	ldd	r25, Y+52	; 0x34
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	98 ab       	std	Y+48, r25	; 0x30
    2800:	8f a7       	std	Y+47, r24	; 0x2f
    2802:	8f a5       	ldd	r24, Y+47	; 0x2f
    2804:	98 a9       	ldd	r25, Y+48	; 0x30
    2806:	9c a7       	std	Y+44, r25	; 0x2c
    2808:	8b a7       	std	Y+43, r24	; 0x2b
    280a:	8b a5       	ldd	r24, Y+43	; 0x2b
    280c:	9c a5       	ldd	r25, Y+44	; 0x2c
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <LCD_displayCharacter+0x528>
    2812:	9c a7       	std	Y+44, r25	; 0x2c
    2814:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2816:	ab e3       	ldi	r26, 0x3B	; 59
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	eb e3       	ldi	r30, 0x3B	; 59
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	88 60       	ori	r24, 0x08	; 8
    2822:	8c 93       	st	X, r24
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a0 e8       	ldi	r26, 0x80	; 128
    282a:	bf e3       	ldi	r27, 0x3F	; 63
    282c:	8f a3       	std	Y+39, r24	; 0x27
    282e:	98 a7       	std	Y+40, r25	; 0x28
    2830:	a9 a7       	std	Y+41, r26	; 0x29
    2832:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2834:	6f a1       	ldd	r22, Y+39	; 0x27
    2836:	78 a5       	ldd	r23, Y+40	; 0x28
    2838:	89 a5       	ldd	r24, Y+41	; 0x29
    283a:	9a a5       	ldd	r25, Y+42	; 0x2a
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	4a e7       	ldi	r20, 0x7A	; 122
    2842:	55 e4       	ldi	r21, 0x45	; 69
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	8b a3       	std	Y+35, r24	; 0x23
    284e:	9c a3       	std	Y+36, r25	; 0x24
    2850:	ad a3       	std	Y+37, r26	; 0x25
    2852:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2854:	6b a1       	ldd	r22, Y+35	; 0x23
    2856:	7c a1       	ldd	r23, Y+36	; 0x24
    2858:	8d a1       	ldd	r24, Y+37	; 0x25
    285a:	9e a1       	ldd	r25, Y+38	; 0x26
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e8       	ldi	r20, 0x80	; 128
    2862:	5f e3       	ldi	r21, 0x3F	; 63
    2864:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2868:	88 23       	and	r24, r24
    286a:	2c f4       	brge	.+10     	; 0x2876 <LCD_displayCharacter+0x590>
		__ticks = 1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9a a3       	std	Y+34, r25	; 0x22
    2872:	89 a3       	std	Y+33, r24	; 0x21
    2874:	3f c0       	rjmp	.+126    	; 0x28f4 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    2876:	6b a1       	ldd	r22, Y+35	; 0x23
    2878:	7c a1       	ldd	r23, Y+36	; 0x24
    287a:	8d a1       	ldd	r24, Y+37	; 0x25
    287c:	9e a1       	ldd	r25, Y+38	; 0x26
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	3f ef       	ldi	r19, 0xFF	; 255
    2882:	4f e7       	ldi	r20, 0x7F	; 127
    2884:	57 e4       	ldi	r21, 0x47	; 71
    2886:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    288a:	18 16       	cp	r1, r24
    288c:	4c f5       	brge	.+82     	; 0x28e0 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288e:	6f a1       	ldd	r22, Y+39	; 0x27
    2890:	78 a5       	ldd	r23, Y+40	; 0x28
    2892:	89 a5       	ldd	r24, Y+41	; 0x29
    2894:	9a a5       	ldd	r25, Y+42	; 0x2a
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e2       	ldi	r20, 0x20	; 32
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9a a3       	std	Y+34, r25	; 0x22
    28b4:	89 a3       	std	Y+33, r24	; 0x21
    28b6:	0f c0       	rjmp	.+30     	; 0x28d6 <LCD_displayCharacter+0x5f0>
    28b8:	80 e9       	ldi	r24, 0x90	; 144
    28ba:	91 e0       	ldi	r25, 0x01	; 1
    28bc:	98 a3       	std	Y+32, r25	; 0x20
    28be:	8f 8f       	std	Y+31, r24	; 0x1f
    28c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28c2:	98 a1       	ldd	r25, Y+32	; 0x20
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <LCD_displayCharacter+0x5de>
    28c8:	98 a3       	std	Y+32, r25	; 0x20
    28ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28cc:	89 a1       	ldd	r24, Y+33	; 0x21
    28ce:	9a a1       	ldd	r25, Y+34	; 0x22
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	9a a3       	std	Y+34, r25	; 0x22
    28d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d6:	89 a1       	ldd	r24, Y+33	; 0x21
    28d8:	9a a1       	ldd	r25, Y+34	; 0x22
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	69 f7       	brne	.-38     	; 0x28b8 <LCD_displayCharacter+0x5d2>
    28de:	14 c0       	rjmp	.+40     	; 0x2908 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e0:	6b a1       	ldd	r22, Y+35	; 0x23
    28e2:	7c a1       	ldd	r23, Y+36	; 0x24
    28e4:	8d a1       	ldd	r24, Y+37	; 0x25
    28e6:	9e a1       	ldd	r25, Y+38	; 0x26
    28e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	9a a3       	std	Y+34, r25	; 0x22
    28f2:	89 a3       	std	Y+33, r24	; 0x21
    28f4:	89 a1       	ldd	r24, Y+33	; 0x21
    28f6:	9a a1       	ldd	r25, Y+34	; 0x22
    28f8:	9e 8f       	std	Y+30, r25	; 0x1e
    28fa:	8d 8f       	std	Y+29, r24	; 0x1d
    28fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <LCD_displayCharacter+0x61a>
    2904:	9e 8f       	std	Y+30, r25	; 0x1e
    2906:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    2908:	ab e3       	ldi	r26, 0x3B	; 59
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	eb e3       	ldi	r30, 0x3B	; 59
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	28 2f       	mov	r18, r24
    2914:	2f 70       	andi	r18, 0x0F	; 15
    2916:	fe 01       	movw	r30, r28
    2918:	ed 59       	subi	r30, 0x9D	; 157
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 81       	ld	r24, Z
    291e:	88 2f       	mov	r24, r24
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	82 95       	swap	r24
    2924:	92 95       	swap	r25
    2926:	90 7f       	andi	r25, 0xF0	; 240
    2928:	98 27       	eor	r25, r24
    292a:	80 7f       	andi	r24, 0xF0	; 240
    292c:	98 27       	eor	r25, r24
    292e:	82 2b       	or	r24, r18
    2930:	8c 93       	st	X, r24
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	a0 e8       	ldi	r26, 0x80	; 128
    2938:	bf e3       	ldi	r27, 0x3F	; 63
    293a:	89 8f       	std	Y+25, r24	; 0x19
    293c:	9a 8f       	std	Y+26, r25	; 0x1a
    293e:	ab 8f       	std	Y+27, r26	; 0x1b
    2940:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2942:	69 8d       	ldd	r22, Y+25	; 0x19
    2944:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2948:	9c 8d       	ldd	r25, Y+28	; 0x1c
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	4a e7       	ldi	r20, 0x7A	; 122
    2950:	55 e4       	ldi	r21, 0x45	; 69
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	8d 8b       	std	Y+21, r24	; 0x15
    295c:	9e 8b       	std	Y+22, r25	; 0x16
    295e:	af 8b       	std	Y+23, r26	; 0x17
    2960:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2962:	6d 89       	ldd	r22, Y+21	; 0x15
    2964:	7e 89       	ldd	r23, Y+22	; 0x16
    2966:	8f 89       	ldd	r24, Y+23	; 0x17
    2968:	98 8d       	ldd	r25, Y+24	; 0x18
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e8       	ldi	r20, 0x80	; 128
    2970:	5f e3       	ldi	r21, 0x3F	; 63
    2972:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2976:	88 23       	and	r24, r24
    2978:	2c f4       	brge	.+10     	; 0x2984 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	9c 8b       	std	Y+20, r25	; 0x14
    2980:	8b 8b       	std	Y+19, r24	; 0x13
    2982:	3f c0       	rjmp	.+126    	; 0x2a02 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2984:	6d 89       	ldd	r22, Y+21	; 0x15
    2986:	7e 89       	ldd	r23, Y+22	; 0x16
    2988:	8f 89       	ldd	r24, Y+23	; 0x17
    298a:	98 8d       	ldd	r25, Y+24	; 0x18
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	3f ef       	ldi	r19, 0xFF	; 255
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	57 e4       	ldi	r21, 0x47	; 71
    2994:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2998:	18 16       	cp	r1, r24
    299a:	4c f5       	brge	.+82     	; 0x29ee <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299c:	69 8d       	ldd	r22, Y+25	; 0x19
    299e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9c 8b       	std	Y+20, r25	; 0x14
    29c2:	8b 8b       	std	Y+19, r24	; 0x13
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <LCD_displayCharacter+0x6fe>
    29c6:	80 e9       	ldi	r24, 0x90	; 144
    29c8:	91 e0       	ldi	r25, 0x01	; 1
    29ca:	9a 8b       	std	Y+18, r25	; 0x12
    29cc:	89 8b       	std	Y+17, r24	; 0x11
    29ce:	89 89       	ldd	r24, Y+17	; 0x11
    29d0:	9a 89       	ldd	r25, Y+18	; 0x12
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <LCD_displayCharacter+0x6ec>
    29d6:	9a 8b       	std	Y+18, r25	; 0x12
    29d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	8b 89       	ldd	r24, Y+19	; 0x13
    29dc:	9c 89       	ldd	r25, Y+20	; 0x14
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	9c 8b       	std	Y+20, r25	; 0x14
    29e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e4:	8b 89       	ldd	r24, Y+19	; 0x13
    29e6:	9c 89       	ldd	r25, Y+20	; 0x14
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	69 f7       	brne	.-38     	; 0x29c6 <LCD_displayCharacter+0x6e0>
    29ec:	14 c0       	rjmp	.+40     	; 0x2a16 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ee:	6d 89       	ldd	r22, Y+21	; 0x15
    29f0:	7e 89       	ldd	r23, Y+22	; 0x16
    29f2:	8f 89       	ldd	r24, Y+23	; 0x17
    29f4:	98 8d       	ldd	r25, Y+24	; 0x18
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9c 8b       	std	Y+20, r25	; 0x14
    2a00:	8b 8b       	std	Y+19, r24	; 0x13
    2a02:	8b 89       	ldd	r24, Y+19	; 0x13
    2a04:	9c 89       	ldd	r25, Y+20	; 0x14
    2a06:	98 8b       	std	Y+16, r25	; 0x10
    2a08:	8f 87       	std	Y+15, r24	; 0x0f
    2a0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a0c:	98 89       	ldd	r25, Y+16	; 0x10
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <LCD_displayCharacter+0x728>
    2a12:	98 8b       	std	Y+16, r25	; 0x10
    2a14:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2a16:	ab e3       	ldi	r26, 0x3B	; 59
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	eb e3       	ldi	r30, 0x3B	; 59
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	87 7f       	andi	r24, 0xF7	; 247
    2a22:	8c 93       	st	X, r24
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	a0 e8       	ldi	r26, 0x80	; 128
    2a2a:	bf e3       	ldi	r27, 0x3F	; 63
    2a2c:	8b 87       	std	Y+11, r24	; 0x0b
    2a2e:	9c 87       	std	Y+12, r25	; 0x0c
    2a30:	ad 87       	std	Y+13, r26	; 0x0d
    2a32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	4a e7       	ldi	r20, 0x7A	; 122
    2a42:	55 e4       	ldi	r21, 0x45	; 69
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	8f 83       	std	Y+7, r24	; 0x07
    2a4e:	98 87       	std	Y+8, r25	; 0x08
    2a50:	a9 87       	std	Y+9, r26	; 0x09
    2a52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a54:	6f 81       	ldd	r22, Y+7	; 0x07
    2a56:	78 85       	ldd	r23, Y+8	; 0x08
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	2c f4       	brge	.+10     	; 0x2a76 <LCD_displayCharacter+0x790>
		__ticks = 1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
    2a74:	3f c0       	rjmp	.+126    	; 0x2af4 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2a76:	6f 81       	ldd	r22, Y+7	; 0x07
    2a78:	78 85       	ldd	r23, Y+8	; 0x08
    2a7a:	89 85       	ldd	r24, Y+9	; 0x09
    2a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	57 e4       	ldi	r21, 0x47	; 71
    2a86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a8a:	18 16       	cp	r1, r24
    2a8c:	4c f5       	brge	.+82     	; 0x2ae0 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e2       	ldi	r20, 0x20	; 32
    2a9c:	51 e4       	ldi	r21, 0x41	; 65
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9e 83       	std	Y+6, r25	; 0x06
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
    2ab6:	0f c0       	rjmp	.+30     	; 0x2ad6 <LCD_displayCharacter+0x7f0>
    2ab8:	80 e9       	ldi	r24, 0x90	; 144
    2aba:	91 e0       	ldi	r25, 0x01	; 1
    2abc:	9c 83       	std	Y+4, r25	; 0x04
    2abe:	8b 83       	std	Y+3, r24	; 0x03
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <LCD_displayCharacter+0x7de>
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2acc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ace:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <LCD_displayCharacter+0x7d2>
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae2:	78 85       	ldd	r23, Y+8	; 0x08
    2ae4:	89 85       	ldd	r24, Y+9	; 0x09
    2ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	9e 83       	std	Y+6, r25	; 0x06
    2af2:	8d 83       	std	Y+5, r24	; 0x05
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	9a 83       	std	Y+2, r25	; 0x02
    2afa:	89 83       	std	Y+1, r24	; 0x01
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <LCD_displayCharacter+0x81a>
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b08:	cd 59       	subi	r28, 0x9D	; 157
    2b0a:	df 4f       	sbci	r29, 0xFF	; 255
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	08 95       	ret

00002b20 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <LCD_displayString+0x6>
    2b26:	0f 92       	push	r0
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	9b 83       	std	Y+3, r25	; 0x03
    2b2e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b30:	19 82       	std	Y+1, r1	; 0x01
    2b32:	0e c0       	rjmp	.+28     	; 0x2b50 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3e:	fc 01       	movw	r30, r24
    2b40:	e2 0f       	add	r30, r18
    2b42:	f3 1f       	adc	r31, r19
    2b44:	80 81       	ld	r24, Z
    2b46:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_displayCharacter>
		i++;
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	8f 5f       	subi	r24, 0xFF	; 255
    2b4e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	e2 0f       	add	r30, r18
    2b5e:	f3 1f       	adc	r31, r19
    2b60:	80 81       	ld	r24, Z
    2b62:	88 23       	and	r24, r24
    2b64:	39 f7       	brne	.-50     	; 0x2b34 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <LCD_goToRowColumn+0x6>
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <LCD_goToRowColumn+0x8>
    2b7a:	0f 92       	push	r0
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	8a 83       	std	Y+2, r24	; 0x02
    2b82:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	3d 83       	std	Y+5, r19	; 0x05
    2b8c:	2c 83       	std	Y+4, r18	; 0x04
    2b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b90:	9d 81       	ldd	r25, Y+5	; 0x05
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	91 05       	cpc	r25, r1
    2b96:	c1 f0       	breq	.+48     	; 0x2bc8 <LCD_goToRowColumn+0x56>
    2b98:	2c 81       	ldd	r18, Y+4	; 0x04
    2b9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b9c:	22 30       	cpi	r18, 0x02	; 2
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	2c f4       	brge	.+10     	; 0x2bac <LCD_goToRowColumn+0x3a>
    2ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	61 f0       	breq	.+24     	; 0x2bc2 <LCD_goToRowColumn+0x50>
    2baa:	19 c0       	rjmp	.+50     	; 0x2bde <LCD_goToRowColumn+0x6c>
    2bac:	2c 81       	ldd	r18, Y+4	; 0x04
    2bae:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb0:	22 30       	cpi	r18, 0x02	; 2
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	69 f0       	breq	.+26     	; 0x2bd0 <LCD_goToRowColumn+0x5e>
    2bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bba:	83 30       	cpi	r24, 0x03	; 3
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	61 f0       	breq	.+24     	; 0x2bd8 <LCD_goToRowColumn+0x66>
    2bc0:	0e c0       	rjmp	.+28     	; 0x2bde <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	0b c0       	rjmp	.+22     	; 0x2bde <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	80 5c       	subi	r24, 0xC0	; 192
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	07 c0       	rjmp	.+14     	; 0x2bde <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	80 5f       	subi	r24, 0xF0	; 240
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    2bd6:	03 c0       	rjmp	.+6      	; 0x2bde <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	80 5b       	subi	r24, 0xB0	; 176
    2bdc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	80 68       	ori	r24, 0x80	; 128
    2be2:	0e 94 56 0d 	call	0x1aac	; 0x1aac <LCD_sendCommand>
}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <LCD_displayStringRowColumn+0x6>
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <LCD_displayStringRowColumn+0x8>
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	6a 83       	std	Y+2, r22	; 0x02
    2c06:	5c 83       	std	Y+4, r21	; 0x04
    2c08:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	6a 81       	ldd	r22, Y+2	; 0x02
    2c0e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	9c 81       	ldd	r25, Y+4	; 0x04
    2c16:	0e 94 90 15 	call	0x2b20	; 0x2b20 <LCD_displayString>
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	62 97       	sbiw	r28, 0x12	; 18
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	9a 8b       	std	Y+18, r25	; 0x12
    2c3e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2c40:	89 89       	ldd	r24, Y+17	; 0x11
    2c42:	9a 89       	ldd	r25, Y+18	; 0x12
    2c44:	9e 01       	movw	r18, r28
    2c46:	2f 5f       	subi	r18, 0xFF	; 255
    2c48:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4a:	b9 01       	movw	r22, r18
    2c4c:	4a e0       	ldi	r20, 0x0A	; 10
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	0e 94 3a 18 	call	0x3074	; 0x3074 <itoa>
   LCD_displayString(buff);
    2c54:	ce 01       	movw	r24, r28
    2c56:	01 96       	adiw	r24, 0x01	; 1
    2c58:	0e 94 90 15 	call	0x2b20	; 0x2b20 <LCD_displayString>
}
    2c5c:	62 96       	adiw	r28, 0x12	; 18
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	0e 94 56 0d 	call	0x1aac	; 0x1aac <LCD_sendCommand>
}
    2c7c:	cf 91       	pop	r28
    2c7e:	df 91       	pop	r29
    2c80:	08 95       	ret

00002c82 <TIMER_vidInit>:
#include "TIMER_interface.h"
#include "TIMER_private.h"
//#include <avr/io.h>

void TIMER_vidInit(void)
{
    2c82:	df 93       	push	r29
    2c84:	cf 93       	push	r28
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0,7);///////
    2c8a:	a3 e5       	ldi	r26, 0x53	; 83
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	e3 e5       	ldi	r30, 0x53	; 83
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	8f 77       	andi	r24, 0x7F	; 127
    2c96:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,6); // normal mode
    2c98:	a3 e5       	ldi	r26, 0x53	; 83
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e3 e5       	ldi	r30, 0x53	; 83
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8f 7b       	andi	r24, 0xBF	; 191
    2ca4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,3);
    2ca6:	a3 e5       	ldi	r26, 0x53	; 83
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e3 e5       	ldi	r30, 0x53	; 83
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	87 7f       	andi	r24, 0xF7	; 247
    2cb2:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,5); //Normal port operation, OC0 disconnected.
    2cb4:	a3 e5       	ldi	r26, 0x53	; 83
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e3 e5       	ldi	r30, 0x53	; 83
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8f 7d       	andi	r24, 0xDF	; 223
    2cc0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,4);
    2cc2:	a3 e5       	ldi	r26, 0x53	; 83
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	e3 e5       	ldi	r30, 0x53	; 83
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	8f 7e       	andi	r24, 0xEF	; 239
    2cce:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,2); //clk I/O (No prescaling)
    2cd0:	a3 e5       	ldi	r26, 0x53	; 83
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e3 e5       	ldi	r30, 0x53	; 83
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	8b 7f       	andi	r24, 0xFB	; 251
    2cdc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
    2cde:	a3 e5       	ldi	r26, 0x53	; 83
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e3 e5       	ldi	r30, 0x53	; 83
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	8d 7f       	andi	r24, 0xFD	; 253
    2cea:	8c 93       	st	X, r24
	SET_BIT  (TCCR0,0);
    2cec:	a3 e5       	ldi	r26, 0x53	; 83
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e3 e5       	ldi	r30, 0x53	; 83
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	81 60       	ori	r24, 0x01	; 1
    2cf8:	8c 93       	st	X, r24

	TCNT0=0;
    2cfa:	e2 e5       	ldi	r30, 0x52	; 82
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	10 82       	st	Z, r1

	SET_BIT(TIMSK,0);
    2d00:	a9 e5       	ldi	r26, 0x59	; 89
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e9 e5       	ldi	r30, 0x59	; 89
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	81 60       	ori	r24, 0x01	; 1
    2d0c:	8c 93       	st	X, r24

	SET_BIT(SREG,7);
    2d0e:	af e5       	ldi	r26, 0x5F	; 95
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	ef e5       	ldi	r30, 0x5F	; 95
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	80 68       	ori	r24, 0x80	; 128
    2d1a:	8c 93       	st	X, r24


}
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <Timer2_init_CTC_Mode>:
void Timer2_init_CTC_Mode()
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
	TCNT2 =0;
    2d2a:	e4 e4       	ldi	r30, 0x44	; 68
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	10 82       	st	Z, r1
	SET_BIT(TCCR2,7);
    2d30:	a5 e4       	ldi	r26, 0x45	; 69
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	e5 e4       	ldi	r30, 0x45	; 69
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	80 68       	ori	r24, 0x80	; 128
    2d3c:	8c 93       	st	X, r24
	SET_BIT(TCCR2,3);
    2d3e:	a5 e4       	ldi	r26, 0x45	; 69
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e5 e4       	ldi	r30, 0x45	; 69
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	88 60       	ori	r24, 0x08	; 8
    2d4a:	8c 93       	st	X, r24
}
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <Timer2_delay>:

void Timer2_delay(uint16 delay)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <Timer2_delay+0x6>
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = 124;
    2d60:	e3 e4       	ldi	r30, 0x43	; 67
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	8c e7       	ldi	r24, 0x7C	; 124
    2d66:	80 83       	st	Z, r24
	SET_BIT(TCCR2,2);
    2d68:	a5 e4       	ldi	r26, 0x45	; 69
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	e5 e4       	ldi	r30, 0x45	; 69
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	84 60       	ori	r24, 0x04	; 4
    2d74:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,1);
    2d76:	a5 e4       	ldi	r26, 0x45	; 69
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e5 e4       	ldi	r30, 0x45	; 69
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	8d 7f       	andi	r24, 0xFD	; 253
    2d82:	8c 93       	st	X, r24
	SET_BIT(TCCR2,0);
    2d84:	a5 e4       	ldi	r26, 0x45	; 69
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e5 e4       	ldi	r30, 0x45	; 69
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	81 60       	ori	r24, 0x01	; 1
    2d90:	8c 93       	st	X, r24
    2d92:	14 c0       	rjmp	.+40     	; 0x2dbc <Timer2_delay+0x6a>

	while (delay > 0)
	{
		if (GET_BIT(TIFR,7)==1)
    2d94:	e8 e5       	ldi	r30, 0x58	; 88
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	88 1f       	adc	r24, r24
    2d9c:	88 27       	eor	r24, r24
    2d9e:	88 1f       	adc	r24, r24
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	61 f4       	brne	.+24     	; 0x2dbc <Timer2_delay+0x6a>
		{
			SET_BIT(TIFR,7);
    2da4:	a8 e5       	ldi	r26, 0x58	; 88
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	e8 e5       	ldi	r30, 0x58	; 88
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	80 68       	ori	r24, 0x80	; 128
    2db0:	8c 93       	st	X, r24
			delay--;
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	9a 81       	ldd	r25, Y+2	; 0x02
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = 124;
	SET_BIT(TCCR2,2);
	CLEAR_BIT(TCCR2,1);
	SET_BIT(TCCR2,0);

	while (delay > 0)
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	41 f7       	brne	.-48     	; 0x2d94 <Timer2_delay+0x42>
		{
			SET_BIT(TIFR,7);
			delay--;
		}
	}
}
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <Timer1_PWM_Mode_init>:

void Timer1_PWM_Mode_init()
{
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
	//DIO_vidSetPinDirection(DIO_PD4, HIGH_PIN);
	DIO_vidSetPinDirection(DIO_PD5, HIGH_PIN);
    2dd6:	8d e1       	ldi	r24, 0x1D	; 29
    2dd8:	61 e0       	ldi	r22, 0x01	; 1
    2dda:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_vidSetPinDirection>

	TCNT1H= 0;
    2dde:	ed e4       	ldi	r30, 0x4D	; 77
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	10 82       	st	Z, r1
	TCNT1L= 0 ;
    2de4:	ec e4       	ldi	r30, 0x4C	; 76
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	10 82       	st	Z, r1
	ICR1H= 0x04 ;
    2dea:	e7 e4       	ldi	r30, 0x47	; 71
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	84 e0       	ldi	r24, 0x04	; 4
    2df0:	80 83       	st	Z, r24
	ICR1L= 0xE2;
    2df2:	e6 e4       	ldi	r30, 0x46	; 70
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	82 ee       	ldi	r24, 0xE2	; 226
    2df8:	80 83       	st	Z, r24

	SET_BIT(TCCR1A, 1);
    2dfa:	af e4       	ldi	r26, 0x4F	; 79
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	ef e4       	ldi	r30, 0x4F	; 79
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	82 60       	ori	r24, 0x02	; 2
    2e06:	8c 93       	st	X, r24
	//SET_BIT(TCCR1B, 3);
	SET_BIT(TCCR1B, 4);
    2e08:	ae e4       	ldi	r26, 0x4E	; 78
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ee e4       	ldi	r30, 0x4E	; 78
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	80 61       	ori	r24, 0x10	; 16
    2e14:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, 7);
    2e16:	af e4       	ldi	r26, 0x4F	; 79
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	ef e4       	ldi	r30, 0x4F	; 79
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	80 68       	ori	r24, 0x80	; 128
    2e22:	8c 93       	st	X, r24

}
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <Timer1_PWM_Mode_Start>:
void Timer1_PWM_Mode_Start(uint16 set_duty_cycleH, uint16 set_duty_cycleL)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <Timer1_PWM_Mode_Start+0x6>
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <Timer1_PWM_Mode_Start+0x8>
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	7c 83       	std	Y+4, r23	; 0x04
    2e3c:	6b 83       	std	Y+3, r22	; 0x03
	OCR1AH= set_duty_cycleH;
    2e3e:	eb e4       	ldi	r30, 0x4B	; 75
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	80 83       	st	Z, r24
	OCR1AL= set_duty_cycleL;
    2e46:	ea e4       	ldi	r30, 0x4A	; 74
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	80 83       	st	Z, r24

	//OCR1BH= set_duty_cycleH;
	//OCR1BL= set_duty_cycleL;

	SET_BIT(TCCR1B, 0);
    2e4e:	ae e4       	ldi	r26, 0x4E	; 78
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	ee e4       	ldi	r30, 0x4E	; 78
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	81 60       	ori	r24, 0x01	; 1
    2e5a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 1);
    2e5c:	ae e4       	ldi	r26, 0x4E	; 78
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	ee e4       	ldi	r30, 0x4E	; 78
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	82 60       	ori	r24, 0x02	; 2
    2e68:	8c 93       	st	X, r24
}
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	cf 91       	pop	r28
    2e74:	df 91       	pop	r29
    2e76:	08 95       	ret

00002e78 <TIMER_1ms_vidInit>:


void TIMER_1ms_vidInit(void)
{
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0,7);
    2e80:	a3 e5       	ldi	r26, 0x53	; 83
    2e82:	b0 e0       	ldi	r27, 0x00	; 0
    2e84:	e3 e5       	ldi	r30, 0x53	; 83
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	80 81       	ld	r24, Z
    2e8a:	8f 77       	andi	r24, 0x7F	; 127
    2e8c:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,6); // normal mode
    2e8e:	a3 e5       	ldi	r26, 0x53	; 83
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	e3 e5       	ldi	r30, 0x53	; 83
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	8f 7b       	andi	r24, 0xBF	; 191
    2e9a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,3);
    2e9c:	a3 e5       	ldi	r26, 0x53	; 83
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e3 e5       	ldi	r30, 0x53	; 83
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	87 7f       	andi	r24, 0xF7	; 247
    2ea8:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,5); //Normal port operation, OC0 disconnected.
    2eaa:	a3 e5       	ldi	r26, 0x53	; 83
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e3 e5       	ldi	r30, 0x53	; 83
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	8f 7d       	andi	r24, 0xDF	; 223
    2eb6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,4);
    2eb8:	a3 e5       	ldi	r26, 0x53	; 83
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e3 e5       	ldi	r30, 0x53	; 83
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	8f 7e       	andi	r24, 0xEF	; 239
    2ec4:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,2); //clk I/O (No prescaling)
    2ec6:	a3 e5       	ldi	r26, 0x53	; 83
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e3 e5       	ldi	r30, 0x53	; 83
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	8b 7f       	andi	r24, 0xFB	; 251
    2ed2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
    2ed4:	a3 e5       	ldi	r26, 0x53	; 83
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e3 e5       	ldi	r30, 0x53	; 83
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	80 81       	ld	r24, Z
    2ede:	8d 7f       	andi	r24, 0xFD	; 253
    2ee0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
    2ee2:	a3 e5       	ldi	r26, 0x53	; 83
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e3 e5       	ldi	r30, 0x53	; 83
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	81 60       	ori	r24, 0x01	; 1
    2eee:	8c 93       	st	X, r24

	TCNT0=192;
    2ef0:	e2 e5       	ldi	r30, 0x52	; 82
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 ec       	ldi	r24, 0xC0	; 192
    2ef6:	80 83       	st	Z, r24

	SET_BIT(TIMSK,0);
    2ef8:	a9 e5       	ldi	r26, 0x59	; 89
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e9 e5       	ldi	r30, 0x59	; 89
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	81 60       	ori	r24, 0x01	; 1
    2f04:	8c 93       	st	X, r24

	SET_BIT(SREG,7);
    2f06:	af e5       	ldi	r26, 0x5F	; 95
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	ef e5       	ldi	r30, 0x5F	; 95
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	80 68       	ori	r24, 0x80	; 128
    2f12:	8c 93       	st	X, r24

}
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <main>:
uint8  volatile Duty;
float32 volatile T_tot;


int main(void)
{
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
	
	Car_Init();
    2f22:	0e 94 17 07 	call	0xe2e	; 0xe2e <Car_Init>
	while (1)
	{
		Car_Move();
    2f26:	0e 94 52 07 	call	0xea4	; 0xea4 <Car_Move>
    2f2a:	fd cf       	rjmp	.-6      	; 0x2f26 <main+0xc>

00002f2c <__vector_11>:
	return 0;
}


ISR(TIMER0_OVF_vect)
{
    2f2c:	1f 92       	push	r1
    2f2e:	0f 92       	push	r0
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	0f 92       	push	r0
    2f34:	11 24       	eor	r1, r1
    2f36:	8f 93       	push	r24
    2f38:	9f 93       	push	r25
    2f3a:	af 93       	push	r26
    2f3c:	bf 93       	push	r27
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
	cli();
    2f46:	f8 94       	cli
	ovf_counter++;
    2f48:	80 91 79 01 	lds	r24, 0x0179
    2f4c:	90 91 7a 01 	lds	r25, 0x017A
    2f50:	a0 91 7b 01 	lds	r26, 0x017B
    2f54:	b0 91 7c 01 	lds	r27, 0x017C
    2f58:	01 96       	adiw	r24, 0x01	; 1
    2f5a:	a1 1d       	adc	r26, r1
    2f5c:	b1 1d       	adc	r27, r1
    2f5e:	80 93 79 01 	sts	0x0179, r24
    2f62:	90 93 7a 01 	sts	0x017A, r25
    2f66:	a0 93 7b 01 	sts	0x017B, r26
    2f6a:	b0 93 7c 01 	sts	0x017C, r27
	sei();
    2f6e:	78 94       	sei
}
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	bf 91       	pop	r27
    2f76:	af 91       	pop	r26
    2f78:	9f 91       	pop	r25
    2f7a:	8f 91       	pop	r24
    2f7c:	0f 90       	pop	r0
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	0f 90       	pop	r0
    2f82:	1f 90       	pop	r1
    2f84:	18 95       	reti

00002f86 <__vector_3>:

ISR(INT2_vect)
{
    2f86:	1f 92       	push	r1
    2f88:	0f 92       	push	r0
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	0f 92       	push	r0
    2f8e:	11 24       	eor	r1, r1
    2f90:	2f 93       	push	r18
    2f92:	3f 93       	push	r19
    2f94:	4f 93       	push	r20
    2f96:	5f 93       	push	r21
    2f98:	6f 93       	push	r22
    2f9a:	7f 93       	push	r23
    2f9c:	8f 93       	push	r24
    2f9e:	9f 93       	push	r25
    2fa0:	af 93       	push	r26
    2fa2:	bf 93       	push	r27
    2fa4:	ef 93       	push	r30
    2fa6:	ff 93       	push	r31
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
	cli();
    2fb0:	f8 94       	cli
	ICU_Read();
    2fb2:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <ICU_Read>
	sei();
    2fb6:	78 94       	sei
}
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	ff 91       	pop	r31
    2fbe:	ef 91       	pop	r30
    2fc0:	bf 91       	pop	r27
    2fc2:	af 91       	pop	r26
    2fc4:	9f 91       	pop	r25
    2fc6:	8f 91       	pop	r24
    2fc8:	7f 91       	pop	r23
    2fca:	6f 91       	pop	r22
    2fcc:	5f 91       	pop	r21
    2fce:	4f 91       	pop	r20
    2fd0:	3f 91       	pop	r19
    2fd2:	2f 91       	pop	r18
    2fd4:	0f 90       	pop	r0
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	0f 90       	pop	r0
    2fda:	1f 90       	pop	r1
    2fdc:	18 95       	reti

00002fde <__udivmodhi4>:
    2fde:	aa 1b       	sub	r26, r26
    2fe0:	bb 1b       	sub	r27, r27
    2fe2:	51 e1       	ldi	r21, 0x11	; 17
    2fe4:	07 c0       	rjmp	.+14     	; 0x2ff4 <__udivmodhi4_ep>

00002fe6 <__udivmodhi4_loop>:
    2fe6:	aa 1f       	adc	r26, r26
    2fe8:	bb 1f       	adc	r27, r27
    2fea:	a6 17       	cp	r26, r22
    2fec:	b7 07       	cpc	r27, r23
    2fee:	10 f0       	brcs	.+4      	; 0x2ff4 <__udivmodhi4_ep>
    2ff0:	a6 1b       	sub	r26, r22
    2ff2:	b7 0b       	sbc	r27, r23

00002ff4 <__udivmodhi4_ep>:
    2ff4:	88 1f       	adc	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	5a 95       	dec	r21
    2ffa:	a9 f7       	brne	.-22     	; 0x2fe6 <__udivmodhi4_loop>
    2ffc:	80 95       	com	r24
    2ffe:	90 95       	com	r25
    3000:	bc 01       	movw	r22, r24
    3002:	cd 01       	movw	r24, r26
    3004:	08 95       	ret

00003006 <__prologue_saves__>:
    3006:	2f 92       	push	r2
    3008:	3f 92       	push	r3
    300a:	4f 92       	push	r4
    300c:	5f 92       	push	r5
    300e:	6f 92       	push	r6
    3010:	7f 92       	push	r7
    3012:	8f 92       	push	r8
    3014:	9f 92       	push	r9
    3016:	af 92       	push	r10
    3018:	bf 92       	push	r11
    301a:	cf 92       	push	r12
    301c:	df 92       	push	r13
    301e:	ef 92       	push	r14
    3020:	ff 92       	push	r15
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	ca 1b       	sub	r28, r26
    3030:	db 0b       	sbc	r29, r27
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	09 94       	ijmp

0000303e <__epilogue_restores__>:
    303e:	2a 88       	ldd	r2, Y+18	; 0x12
    3040:	39 88       	ldd	r3, Y+17	; 0x11
    3042:	48 88       	ldd	r4, Y+16	; 0x10
    3044:	5f 84       	ldd	r5, Y+15	; 0x0f
    3046:	6e 84       	ldd	r6, Y+14	; 0x0e
    3048:	7d 84       	ldd	r7, Y+13	; 0x0d
    304a:	8c 84       	ldd	r8, Y+12	; 0x0c
    304c:	9b 84       	ldd	r9, Y+11	; 0x0b
    304e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3050:	b9 84       	ldd	r11, Y+9	; 0x09
    3052:	c8 84       	ldd	r12, Y+8	; 0x08
    3054:	df 80       	ldd	r13, Y+7	; 0x07
    3056:	ee 80       	ldd	r14, Y+6	; 0x06
    3058:	fd 80       	ldd	r15, Y+5	; 0x05
    305a:	0c 81       	ldd	r16, Y+4	; 0x04
    305c:	1b 81       	ldd	r17, Y+3	; 0x03
    305e:	aa 81       	ldd	r26, Y+2	; 0x02
    3060:	b9 81       	ldd	r27, Y+1	; 0x01
    3062:	ce 0f       	add	r28, r30
    3064:	d1 1d       	adc	r29, r1
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	ed 01       	movw	r28, r26
    3072:	08 95       	ret

00003074 <itoa>:
    3074:	fb 01       	movw	r30, r22
    3076:	9f 01       	movw	r18, r30
    3078:	e8 94       	clt
    307a:	42 30       	cpi	r20, 0x02	; 2
    307c:	c4 f0       	brlt	.+48     	; 0x30ae <itoa+0x3a>
    307e:	45 32       	cpi	r20, 0x25	; 37
    3080:	b4 f4       	brge	.+44     	; 0x30ae <itoa+0x3a>
    3082:	4a 30       	cpi	r20, 0x0A	; 10
    3084:	29 f4       	brne	.+10     	; 0x3090 <itoa+0x1c>
    3086:	97 fb       	bst	r25, 7
    3088:	1e f4       	brtc	.+6      	; 0x3090 <itoa+0x1c>
    308a:	90 95       	com	r25
    308c:	81 95       	neg	r24
    308e:	9f 4f       	sbci	r25, 0xFF	; 255
    3090:	64 2f       	mov	r22, r20
    3092:	77 27       	eor	r23, r23
    3094:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__udivmodhi4>
    3098:	80 5d       	subi	r24, 0xD0	; 208
    309a:	8a 33       	cpi	r24, 0x3A	; 58
    309c:	0c f0       	brlt	.+2      	; 0x30a0 <itoa+0x2c>
    309e:	89 5d       	subi	r24, 0xD9	; 217
    30a0:	81 93       	st	Z+, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	a1 f7       	brne	.-24     	; 0x3090 <itoa+0x1c>
    30a8:	16 f4       	brtc	.+4      	; 0x30ae <itoa+0x3a>
    30aa:	5d e2       	ldi	r21, 0x2D	; 45
    30ac:	51 93       	st	Z+, r21
    30ae:	10 82       	st	Z, r1
    30b0:	c9 01       	movw	r24, r18
    30b2:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <strrev>

000030b6 <strrev>:
    30b6:	dc 01       	movw	r26, r24
    30b8:	fc 01       	movw	r30, r24
    30ba:	67 2f       	mov	r22, r23
    30bc:	71 91       	ld	r23, Z+
    30be:	77 23       	and	r23, r23
    30c0:	e1 f7       	brne	.-8      	; 0x30ba <strrev+0x4>
    30c2:	32 97       	sbiw	r30, 0x02	; 2
    30c4:	04 c0       	rjmp	.+8      	; 0x30ce <strrev+0x18>
    30c6:	7c 91       	ld	r23, X
    30c8:	6d 93       	st	X+, r22
    30ca:	70 83       	st	Z, r23
    30cc:	62 91       	ld	r22, -Z
    30ce:	ae 17       	cp	r26, r30
    30d0:	bf 07       	cpc	r27, r31
    30d2:	c8 f3       	brcs	.-14     	; 0x30c6 <strrev+0x10>
    30d4:	08 95       	ret

000030d6 <_exit>:
    30d6:	f8 94       	cli

000030d8 <__stop_program>:
    30d8:	ff cf       	rjmp	.-2      	; 0x30d8 <__stop_program>
